<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Constantin</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-13T09:36:19.912Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Constantin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用photo-sphere-viewer实现360全景+重力感应</title>
    <link href="http://yoursite.com/2018/05/13/photo-sphere-viewer/"/>
    <id>http://yoursite.com/2018/05/13/photo-sphere-viewer/</id>
    <published>2018-05-13T09:35:14.811Z</published>
    <updated>2018-05-13T09:36:19.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用photo-sphere-viewer"><a href="#使用photo-sphere-viewer" class="headerlink" title="使用photo-sphere-viewer"></a>使用photo-sphere-viewer</h2><p>这是一个使用three实现的360全景第三方库，实现效果很不错，<a href="https://photo-sphere-viewer.js.org" target="_blank" rel="noopener">这是官方文档</a>，<a href="https://photo-sphere-viewer.js.org/markers.html" target="_blank" rel="noopener">以及DEMO</a>，官网上的文档只是一些API讲解，这里我简单使用vue-cli将其配置到工程中，方便之后开发。</p><a id="more"></a><h3 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h3><p>使用vue-cli新建工程</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack psv</span><br><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><h3 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h3><p>引入photo-sphere-viewer</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span> photo-<span class="built_in">sphere</span>-viewer</span><br></pre></td></tr></table></figure><p>然后在main.js中引入 import ‘./assets/photo-sphere-viewer.min.css’<br>其中photo-sphere-viewer.min.css需要在node_modules中对应的dist文件夹找到</p><h3 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h3><p>在需要使用的vue组件中添加div+id:photosphere，并给这个div添加宽高<br>然后在mounted中写入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"photosphere"</span>);</span><br><span class="line">   <span class="keyword">var</span> PSV = <span class="keyword">new</span> PhotoSphereViewer(&#123;</span><br><span class="line">     panorama:</span><br><span class="line">       <span class="string">"http://tassedecafe.org/wp-content/uploads/2013/01/parc-saint-pierre-amiens.jpg"</span>,</span><br><span class="line">     container: div,</span><br><span class="line">     time_anim: <span class="number">3000</span>,</span><br><span class="line">     navbar: <span class="literal">true</span>,</span><br><span class="line">     navbar_style: &#123;</span><br><span class="line">       backgroundColor: <span class="string">"rgba(58, 67, 77, 0.7)"</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   &lt;!--PSV.startGyroscopeControl()--&gt;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>到这里，简单的全景窗口已经实现了，如果需要在手机浏览器上开启重力感应的话，还需要费些力气</p><h3 id="实现重力感应"><a href="#实现重力感应" class="headerlink" title="实现重力感应"></a>实现重力感应</h3><p>官网上关于重力感应开启有这样一段话：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Gyroscope support</span><br><span class="line">In order <span class="built_in">to</span> be able <span class="built_in">to</span> respond <span class="built_in">to</span> device gyroscope (gyroscope option),</span><br><span class="line">Photo Sphere Viewer requires <span class="keyword">the</span> following <span class="built_in">files</span> <span class="built_in">from</span> Three.js examples </span><br><span class="line">(also available <span class="keyword">in</span> <span class="literal">three</span>.js-examples Bower package) :</span><br></pre></td></tr></table></figure><p>也就是说需要这个<a href="https://github.com/mrdoob/three.js/blob/master/examples/js/controls/DeviceOrientationControls.js" target="_blank" rel="noopener">example文件</a>，我去找了下，这个文件在three.js的example文件中，是作者自己写的全景重力感应实现例子，这里有篇详细<a href="https://juejin.im/entry/5933ce66a22b9d0058e381b0" target="_blank" rel="noopener">解析的文章</a>，我是到node_modules中的photo-sphere-viewer的dist里去添加，添加到photo-sphere-viewer.js的里面</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (this<span class="selector-class">.config</span><span class="selector-class">.gyroscope</span> &amp;&amp; PSVUtils.checkTHREE(<span class="string">'DeviceOrientationControls'</span>)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还要注意这里还有一个gyroscope属性，我找到是在DEFAULTS里，没能找到修改接口</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PhotoSphereViewer.DEFAULTS = &#123;</span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    gyroscope: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我直接将gyroscope修改为true，还有个地方，在</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PSVUtils.checkTHREE = <span class="function"><span class="keyword">function</span><span class="params">(components)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是判断方法有没有在three中，需要添加<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (components === <span class="string">'DeviceOrientationControls'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这样，把上面注释中的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--PSV.startGyroscopeControl()--&gt;</span></span><br></pre></td></tr></table></figure></p><p>开启，这样在手机浏览器上就能看到可以用重力感应控制的全景图。</p><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>不知道为什么配置重力感应这么麻烦勒，所以我决定去提issue，看看作者的思路，本配置随时更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用photo-sphere-viewer&quot;&gt;&lt;a href=&quot;#使用photo-sphere-viewer&quot; class=&quot;headerlink&quot; title=&quot;使用photo-sphere-viewer&quot;&gt;&lt;/a&gt;使用photo-sphere-viewer&lt;/h2&gt;&lt;p&gt;这是一个使用three实现的360全景第三方库，实现效果很不错，&lt;a href=&quot;https://photo-sphere-viewer.js.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这是官方文档&lt;/a&gt;，&lt;a href=&quot;https://photo-sphere-viewer.js.org/markers.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;以及DEMO&lt;/a&gt;，官网上的文档只是一些API讲解，这里我简单使用vue-cli将其配置到工程中，方便之后开发。&lt;/p&gt;
    
    </summary>
    
    
      <category term="全景" scheme="http://yoursite.com/tags/%E5%85%A8%E6%99%AF/"/>
    
  </entry>
  
  <entry>
    <title>RN环境配置踩坑总结</title>
    <link href="http://yoursite.com/2018/05/13/rn_start/"/>
    <id>http://yoursite.com/2018/05/13/rn_start/</id>
    <published>2018-05-13T09:34:23.266Z</published>
    <updated>2018-05-13T09:37:10.388Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>同步参考：<a href="https://reactnative.cn/docs/0.51/getting-started.html#content" target="_blank" rel="noopener">https://reactnative.cn/docs/0.51/getting-started.html#content</a></p></blockquote><blockquote><p>平台：macOs 10.13.3</p></blockquote><blockquote><p>工具：Xcode，Android Studio</p></blockquote><h3 id="最终实现："><a href="#最终实现：" class="headerlink" title="最终实现："></a>最终实现：</h3><ul><li>连接安卓真机自动安装apk，查看结果</li><li>使用xcode打开ios模拟器调试代码</li></ul><a id="more"></a><h4 id="Step1"><a href="#Step1" class="headerlink" title="Step1:"></a>Step1:</h4><p>  安装RN命令行工具：react-native-cli，并新建项目hello_world</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g react-<span class="keyword">native</span>-cli</span><br><span class="line">react-<span class="keyword">native</span> init hello_world</span><br><span class="line">cd hello_world</span><br></pre></td></tr></table></figure><p>这时候需要把package.json中的</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"babel-preset-react-native"</span>: <span class="string">"4.0.0"</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为4.0.0，不然在ios这边可能会遇到这个错误：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed <span class="keyword">to</span> load bundle: Cannot <span class="keyword">read</span> <span class="keyword">property</span> <span class="string">'throwIfClosureRequired'</span> <span class="keyword">of</span> undefined</span><br></pre></td></tr></table></figure><p>详见：<a href="https://github.com/facebook/react-native/issues/18962" target="_blank" rel="noopener">https://github.com/facebook/react-native/issues/18962</a></p><p>最后删掉node_modules和package-lock.json文件重新npm install下就好了</p><h4 id="Step2"><a href="#Step2" class="headerlink" title="Step2:"></a>Step2:</h4><p>  去App Store或者官网下载Xcode和AS</p><p>  AS按照上面同步参考中的配置进行安装</p><h4 id="Step3"><a href="#Step3" class="headerlink" title="Step3:"></a>Step3:</h4><p>  先来试试安卓，当我们把AS配置好后，需要按照上面同步参考配置下<a href="https://reactnative.cn/docs/0.51/getting-started.html#android_home%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F" target="_blank" rel="noopener">ANDROID_HOME环境变量</a>，连接你的安卓手机，打开调试，然后安装adb，通过adb devices查看到你的设备，最后运行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native <span class="keyword">run</span><span class="bash">-android</span></span><br></pre></td></tr></table></figure><p>就会自动安装apk到你的手机，打开就能看到你的app了</p><h4 id="Step4"><a href="#Step4" class="headerlink" title="Step4:"></a>Step4:</h4><p>  接下来是ios设备，你只需用Xcode打开项目中ios文件夹里的hello_world.xcodeproj,然后点击运行按钮，第一次build会比较慢，之后就会很快了，build好之后就能在模拟器里看到欢迎界面了。</p><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><p>  简单用两种方式配置了两种环境的RN项目启动，可能还有其他问题，以后遇到再慢慢补充了</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;同步参考：&lt;a href=&quot;https://reactnative.cn/docs/0.51/getting-started.html#content&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://reactnative.cn/docs/0.51/getting-started.html#content&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;平台：macOs 10.13.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;工具：Xcode，Android Studio&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;最终实现：&quot;&gt;&lt;a href=&quot;#最终实现：&quot; class=&quot;headerlink&quot; title=&quot;最终实现：&quot;&gt;&lt;/a&gt;最终实现：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;连接安卓真机自动安装apk，查看结果&lt;/li&gt;
&lt;li&gt;使用xcode打开ios模拟器调试代码&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>用ssh -L 搭一个本地转发隧道访问内网数据库</title>
    <link href="http://yoursite.com/2018/05/09/ssh_tunnel/"/>
    <id>http://yoursite.com/2018/05/09/ssh_tunnel/</id>
    <published>2018-05-09T08:58:37.138Z</published>
    <updated>2018-05-09T08:58:37.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h2><p>本机需要连接内网服务器192.168.1.163上的MYSQL数据库，本机在内网服务器上已经建立ssh连接，由于数据库禁止外来IP访问，所以需要建立一个本地端口转发，使得本地能访问到此数据库。<a id="more"></a></p><h2 id="使用命令："><a href="#使用命令：" class="headerlink" title="使用命令："></a>使用命令：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-fN</span> <span class="selector-tag">-L</span> 3307<span class="selector-pseudo">:127.0.0.1</span><span class="selector-pseudo">:3306</span> <span class="selector-tag">-p</span> 22 <span class="selector-tag">username</span>@<span class="keyword">192</span>.<span class="keyword">168</span>.<span class="keyword">1</span>.<span class="keyword">163</span></span><br></pre></td></tr></table></figure><p>其中这个username是内网服务器的账户，不能与数据库的账户搞混。  </p><h2 id="ssh本地转发的语法："><a href="#ssh本地转发的语法：" class="headerlink" title="ssh本地转发的语法："></a>ssh本地转发的语法：</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-fN</span> <span class="selector-tag">-L</span>(要绑定到的本地端口)<span class="selector-pseudo">:(</span>服务器<span class="selector-tag">B</span>的<span class="selector-tag">Host</span>)<span class="selector-pseudo">:(</span>服务器<span class="selector-tag">B</span>上要访问的端口号) <span class="selector-tag">-p</span>(服务器A的端口，默认为<span class="number">22</span>) (服务器A的账户)<span class="selector-pseudo">:(</span>服务器<span class="selector-tag">A</span>的<span class="selector-tag">Host</span>)</span><br></pre></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>ssh隧道讲解：<a href="http://hetaoo.iteye.com/blog/2299123" target="_blank" rel="noopener">http://hetaoo.iteye.com/blog/2299123</a><br>ssh连接命令：<a href="http://blog.csdn.net/suhi" target="_blank" rel="noopener">http://blog.csdn.net/suhi</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明:"></a>声明:</h2><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a><br>链接 ： <a href="http://constantin.cc/2017/09/26/ssh_tunnel/" target="_blank" rel="noopener">http://constantin.cc/2017/09/26/ssh_tunnel/</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用场景：&quot;&gt;&lt;a href=&quot;#使用场景：&quot; class=&quot;headerlink&quot; title=&quot;使用场景：&quot;&gt;&lt;/a&gt;使用场景：&lt;/h2&gt;&lt;p&gt;本机需要连接内网服务器192.168.1.163上的MYSQL数据库，本机在内网服务器上已经建立ssh连接，由于数据库禁止外来IP访问，所以需要建立一个本地端口转发，使得本地能访问到此数据库。
    
    </summary>
    
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>记一次前端React自动化流程系统项目重构优化</title>
    <link href="http://yoursite.com/2018/05/09/srs_rebuild/"/>
    <id>http://yoursite.com/2018/05/09/srs_rebuild/</id>
    <published>2018-05-09T08:58:37.138Z</published>
    <updated>2018-05-09T08:58:37.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>最近在正在某公司的数据分析部门实习，前段时间做了一个自动化流程系统，主要功能是从数据库读取所有项目信息进行展示，分析人员选择项目，输入配置信息开始分析流程，分析过程就是调用已有数据分析的python脚本，最后将结果生成excel，我再根据得到excel的数据进行合理分析，处理成合适的数据结构返回给前端进行的可视化展示。先来看看当时的核心功能代码截图：<br><a id="more"></a><br><img src="/img/srs_before.png" alt="srs_before"><br>是直接把所有功能揉在了一起，因为使用了antd，所以直接把CSS也写到了js里，当时写完还没觉得有什么问题，一共500多行，但是一个月后又有一个新的流程化工作，我就想直接把这个前端套起来用，但是发现整个项目可维护性，可扩展性实在太差，很多东西自己都整理理不清除了，所以有了这次重构。</p><hr><h3 id="从画系统流程图开始"><a href="#从画系统流程图开始" class="headerlink" title="从画系统流程图开始"></a>从画系统流程图开始</h3><p>这一次，为了清晰思路，在最开始我就画好流程图，来观察整个系统的结构，首先是决定引入Redux来做数据状态管理，把数据源存储和数据更新给剥离开，使得核心代码更加专注与后台进行数据交互，而且这样跨组件通信更加方便，其次是将核心功能分离、分层，将内容展示和数据可视化部分和两个独立功能分开，内容展示中又把数据渲染和分页加载分开，也就是说在数据加载的部分里不进行数据渲染，将数据渲染单独放到一边；数据可视化部分也是把数据渲染和数据获取给分开了，最后再把样式从Js中抽离；最后得到的完整流程图如下：<br><img src="/img/SRS.png" alt="SRS"></p><hr><h3 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h3><p>完成流程图后就一直跟着流程图在重构，最后的效果很不错，极大的提升的整个项目的可维护性和可扩展性，但是还是有很多问题，我接着做了进一步优化，首先是将一些全局变量添加到配置文件中，比如请求的URL，一些常用的路径信息等，然后又对redux进行优化，首先就是把redux中那些不涉及到跨组件通信的数据放回到组件本身的State中，这样一来，redux中需要更新的数据就是需要经由后台加载更新的数据了，而这些数据由于流程图中做到了数据加载和数据渲染组件的分离，就能非常清晰的获取他们的流动和更新了。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>首先是这次使用到的技术栈，react+redux，然后是使用到了antd和antv来做UI套件和数据可视化，这2个系统下来已经使用的比较熟练了，具体的项目内容总结后续会接着写一篇来讲。总之，经过这次项目优化，学习到了如何让自己的项目结构更加清晰，项目细节更加完美，而不是像之前按那样大锅炖，毫无可维护性和可扩展性，或许自己使用没问题，但是更多还是需要考虑到自己的代码或许有一天会被别人阅读，如果不想被别人吐槽的话还是老实的做好结构优化吧！</p><p><img src="/img/srs_end.png" alt="srs_end"></p><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;最近在正在某公司的数据分析部门实习，前段时间做了一个自动化流程系统，主要功能是从数据库读取所有项目信息进行展示，分析人员选择项目，输入配置信息开始分析流程，分析过程就是调用已有数据分析的python脚本，最后将结果生成excel，我再根据得到excel的数据进行合理分析，处理成合适的数据结构返回给前端进行的可视化展示。先来看看当时的核心功能代码截图：&lt;br&gt;
    
    </summary>
    
    
      <category term="实习项目总结" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>搭建数据分析流程化系统</title>
    <link href="http://yoursite.com/2018/05/09/srs_all/"/>
    <id>http://yoursite.com/2018/05/09/srs_all/</id>
    <published>2018-05-09T08:58:37.138Z</published>
    <updated>2018-05-09T08:58:37.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实习项目"><a href="#实习项目" class="headerlink" title="实习项目"></a>实习项目</h2><p>主要功能：从数据库读取所有项目信息进行展示，分析人员选择项目，输入配置信息开始分析流程，分析过程就是调用已有数据分析的python脚本，最后将结果生成excel，我再根据excel的数据进行合理分析，处理生成合适的数据结构返回给前端进行的可视化展示。流程图如下:<br><a id="more"></a><br><img src="/img/SRS.png" alt="SRS"><br>除了数据分析的python脚本外，从前端开始到后台，再到数据可视化部分均由我完成，接下来我会简单对整个项目进行总结分析。<br>最后的效果图如下：<br><img src="/img/数据展示2.png" alt="数据展示2"><br><img src="/img/数据展示.png" alt="数据展示2"></p><hr><h2 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h2><p>分为三个Tab</p><ul><li>首先是展示所有项目，每个项目又有子项目，最后需要操作的是每个项目里的子项目，所以这里我采用的是AntD中的折叠面板+Card，用折叠面板表示每个项目点击折叠面板展开所有子项目，子项目是一个个Card，Card上放各种控件来单独绑定每个子项目，比如使用到步骤条来表示当前进行到的步骤，使用输入框来对特定的参数进行配置等；然后引入分页组件来进行分页加载，每10个项目设为一页，首次加载时加载前10条数据，每次点击页数首先查看这页的数据有没有加载过，如果加载过就不再加载，否则就加载当前页的10条数据。</li><li>上面是的数据来源是SQL数据库，所以单开一个Tab处理从excel中读取数据进行分析，也是一个Card，上面放上各种所需控件</li><li>最后一个是数据可视化，这个部分是我觉得有挑战性的地方，因为整个分析流程最后跑出来的是一个excel，这个excel里有各种数据，首先需要做的就是分析这些从数据能获得什么信息，然后去找合适的可视化模型，最后根据模型所需要的json数据，由excel中这样数据结构的数据提取出来，这次我使用到的数据模型是AndV中的矩形树图+词云，模型构思如下：根据最后聚类结果，首先是大量的类别，每个类别下对应有很多项目，每个项目又有多个属性，也就是评价，通过统计评价的频次，前面两层类别和类别里的各个项目，我把他们放到一个两层的矩形树图里，具体例子见：<a href="https://antv.alipay.com/vis/doc/chart/deta" target="_blank" rel="noopener">https://antv.alipay.com/vis/doc/chart/deta</a> 例子1的手机销量展示，在这里我们的类别根据其对应所有评价数的占比放入第一层矩形树图，这时候点击此类目，进入第二层矩形树图，第二层矩形树图对应的是此类目所有项目根据其对应所有评论数放入第二层，这是点击各个项目，我们就在矩形树图的下方生成一个这个项目所有评价的词云，大致思路就是这样，这里是可视化部分的结果：<br><img src="/img/可视化.png" alt="可视化"><br><img src="/img/可视化2.png" alt="可视化2">   </li></ul><hr><h2 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h2><ul><li>后端使用flask，主要实现的功能有：</li><li>调用流程化所需的脚本</li><li>从数据库读取项目数据返回前端</li><li>处理分析结果的excel文件转为所需数据格式的json数据并返回前端</li></ul><hr><h2 id="部署以及注册系统服务"><a href="#部署以及注册系统服务" class="headerlink" title="部署以及注册系统服务"></a>部署以及注册系统服务</h2><ul><li>使用gunicorn简单进行部署</li><li>使用Sysv方法注册系统服务</li></ul><hr><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>之前关于这个项目前端的优化链接：<a href="http://constantin.cc/2017/12/29/srs_rebuild/" target="_blank" rel="noopener">http://constantin.cc/2017/12/29/srs_rebuild/</a><br>在搭建整个系统的过程中，有注意到两点，首先是整个流程化系统的监控粒度问题，举个简单的例子，每个流程化过程中的脚本都会有大量的状态信息输出到log中，那么怎么去把我们需要的信息获取到，并选择合适的部分展示给使用的人，让其对整个过程有更加直观方便的了解和管理，我觉得这个部分是我并没有做的很好的地方，我只是简单返回当前流程的行进步骤，没想到合适的方法去获取和实时展示后台的分析过程。还有就是最后将处理结果的excel处理为json格式的数据，最开始我有想做一个简单的系统去进行，也就是你只需要在前端指定所需的json的数据某个是由哪张表的哪些数据来的，然后由后端自动生成这样的数据返回回来，但是我又想到，其实对于这样的数据本身就是高度定制的，不太适合由自动工具去完成了，也就暂时放弃了这样的想法，待以后慢慢构思。</p><p><img src="/img/srs_all.png" alt="SRS"></p><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实习项目&quot;&gt;&lt;a href=&quot;#实习项目&quot; class=&quot;headerlink&quot; title=&quot;实习项目&quot;&gt;&lt;/a&gt;实习项目&lt;/h2&gt;&lt;p&gt;主要功能：从数据库读取所有项目信息进行展示，分析人员选择项目，输入配置信息开始分析流程，分析过程就是调用已有数据分析的python脚本，最后将结果生成excel，我再根据excel的数据进行合理分析，处理生成合适的数据结构返回给前端进行的可视化展示。流程图如下:&lt;br&gt;
    
    </summary>
    
    
      <category term="实习项目总结" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>简易PM2+Nginx部署流程</title>
    <link href="http://yoursite.com/2018/05/09/pm2_nginx/"/>
    <id>http://yoursite.com/2018/05/09/pm2_nginx/</id>
    <published>2018-05-09T08:58:37.138Z</published>
    <updated>2018-05-09T08:58:37.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PM2"><a href="#PM2" class="headerlink" title="PM2"></a>PM2</h2><ul><li>使用 pm2 命令运行 express 应用：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pm2 start index.js</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>根据id号或应用名停止该应用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 <span class="keyword">stop</span> <span class="keyword">id</span>/<span class="keyword">name</span></span><br></pre></td></tr></table></figure><ul><li>根据id号或应用名实时监控该应用</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 monit <span class="built_in">id</span>/<span class="built_in">name</span></span><br></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ul><li><p>进入配置目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /etc/nginx/sites-enabled</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi default</span></span><br></pre></td></tr></table></figure></li><li><p>修改default文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> my-app &#123;</span><br><span class="line">    <span class="comment"># Nodejs app upstream</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3000</span>;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Server on port 80</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="comment">#绑定的域名</span></span><br><span class="line">    <span class="attribute">server_name</span> xxx.xxx.com;</span><br><span class="line">    <span class="comment">#文件根目录</span></span><br><span class="line">    <span class="attribute">root</span> /home/ubuntu/../..;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># Proxy_pass configuration</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">        <span class="attribute">proxy_max_temp_file_size</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1：3000/;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">240s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://segmentfault.com/a/1190000004976222" target="_blank" rel="noopener">如需配置https</a></p></li><li><p>测试Nginx</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nginx -t</span></span><br></pre></td></tr></table></figure><ul><li>重启后所有来自 Nginx 的流量都会被转发到运行在 3000 端口的 node app</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://linux.cn/article-8494-1.html#3_6513" target="_blank" rel="noopener">如何在 Ubuntu 上使用 pm2 和 Nginx 部署 Node.js 应用</a></li><li><a href="https://www.cnblogs.com/zhouxinfei/p/7862285.html" target="_blank" rel="noopener">Nginx安装及配置详解</a></li><li><a href="https://www.jianshu.com/p/e709b71f12da" target="_blank" rel="noopener">pm2常用命令</a></li></ul><p><img src="/img/pm2_nginx.jpg" alt="和泉雾纱"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PM2&quot;&gt;&lt;a href=&quot;#PM2&quot; class=&quot;headerlink&quot; title=&quot;PM2&quot;&gt;&lt;/a&gt;PM2&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 pm2 命令运行 express 应用：&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; pm2 start index.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="server" scheme="http://yoursite.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>一道关于JavaScript解析器错误的面试题</title>
    <link href="http://yoursite.com/2018/05/09/interview/"/>
    <id>http://yoursite.com/2018/05/09/interview/</id>
    <published>2018-05-09T08:58:37.137Z</published>
    <updated>2018-05-09T08:58:37.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一道关于JavaScript解析器错误的面试题"><a href="#一道关于JavaScript解析器错误的面试题" class="headerlink" title="一道关于JavaScript解析器错误的面试题"></a>一道关于JavaScript解析器错误的面试题</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">n</span> = <span class="number">2</span>.toString()</span><br><span class="line">console.log(<span class="built_in">n</span>)</span><br></pre></td></tr></table></figure><p>问输出什么？<br><a id="more"></a><br>答案是控制台报错，原因如下：<br>数字的字面值（literal）不能当作对象使用。这是因为 JavaScript 解析器的一个错误， 它试图将点操作符解析为浮点数字面值的一部分。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">2</span><span class="selector-class">.toString</span>(); <span class="comment">// 出错：SyntaxError</span></span><br></pre></td></tr></table></figure><p>有很多变通方法可以让数字的字面值看起来像对象。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">2</span>.<span class="selector-class">.toString</span>(); <span class="comment">// 第二个点号可以正常解析</span></span><br><span class="line"><span class="selector-tag">2</span> <span class="selector-class">.toString</span>(); <span class="comment">// 注意点号前面的空格</span></span><br><span class="line">(<span class="number">2</span>)<span class="selector-class">.toString</span>(); <span class="comment">// 2先被计算</span></span><br></pre></td></tr></table></figure></p><p>解释出自：<br><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript Garden</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明:"></a>声明:</h2><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一道关于JavaScript解析器错误的面试题&quot;&gt;&lt;a href=&quot;#一道关于JavaScript解析器错误的面试题&quot; class=&quot;headerlink&quot; title=&quot;一道关于JavaScript解析器错误的面试题&quot;&gt;&lt;/a&gt;一道关于JavaScript解析器错误的面试题&lt;/h2&gt;&lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h3&gt;&lt;figure class=&quot;highlight excel&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;n&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.toString()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(&lt;span class=&quot;built_in&quot;&gt;n&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;问输出什么？&lt;br&gt;
    
    </summary>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>使用frp配置内网穿透</title>
    <link href="http://yoursite.com/2018/05/09/frps/"/>
    <id>http://yoursite.com/2018/05/09/frps/</id>
    <published>2018-05-09T08:58:37.137Z</published>
    <updated>2018-05-09T08:58:37.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为了微信开发"><a href="#为了微信开发" class="headerlink" title="为了微信开发"></a>为了微信开发</h2><p>配置内网穿透的原因是微信开发在线调试需要配置域名和服务器，如果是在本地开发如果想要实时调试就比较麻烦，所以想办法用frp简单配置了下内网穿透，在此简单记录。<br><a id="more"></a></p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>在云服器上下载解压frp<br>修改配置文件：frps.ini<br>添加：vhost_http_port = 3006<br>然后使用命令./frps -c ./frps.ini开启</p><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>在本地下载frp<br>修改配置文件：frpc.ini<br>将server_addr 修改为服务器的公网ip<br>底下添加：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 3006</span><br><span class="line">custom_domains = yourdomains.com</span><br></pre></td></tr></table></figure></p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>将域名解析到服务器上<br>然后本地使用powershell开启即可:<br><code>./frpc -c ./frpc.ini</code>  </p><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为了微信开发&quot;&gt;&lt;a href=&quot;#为了微信开发&quot; class=&quot;headerlink&quot; title=&quot;为了微信开发&quot;&gt;&lt;/a&gt;为了微信开发&lt;/h2&gt;&lt;p&gt;配置内网穿透的原因是微信开发在线调试需要配置域名和服务器，如果是在本地开发如果想要实时调试就比较麻烦，所以想办法用frp简单配置了下内网穿透，在此简单记录。&lt;br&gt;
    
    </summary>
    
    
      <category term="内网穿透" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>万物无非是let，变化历历；又如const，永恒安息</title>
    <link href="http://yoursite.com/2018/05/09/hello-world/"/>
    <id>http://yoursite.com/2018/05/09/hello-world/</id>
    <published>2018-05-09T08:58:37.137Z</published>
    <updated>2018-05-09T08:58:37.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="兜兜转转，终于还是开始了"><a href="#兜兜转转，终于还是开始了" class="headerlink" title="兜兜转转，终于还是开始了"></a><strong>兜兜转转，终于还是开始了</strong></h2><p>&nbsp;&nbsp;大一开始在CSDN上写博客主要是算法的一些东西，也爱上了使用markdown编辑器，之后学习前端，就开始想自己搭博客，也前前后后写了一些DEMO 但是都不满意，而且还有很多问题因为技术有限没法实现，所以就使用HEXO了，主题：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">Yilia</a>，<a id="more"></a>后来发现作者在原来的版本上进行了很多修改，而我更喜欢之前的版本，找到了<a href="http://www.voidking.com" target="_blank" rel="noopener">VoidKing</a>大佬的版本，很喜欢就直接使用啦。然后在这个版本上，我自己添加了可以向左隐藏介绍页和返回顶部按钮的功能，接下来的工作就是CSDN博客文章的搬迁工作，还有就是积攒了很久的新文章的撰写工作了。总之<br>    “路漫漫其修远兮，吾将上下而求索。”</p><p><img src="/img/hello.jpg" alt="By:[SUKJA]"></p><p>  作者 ： PrConstantin<br>  来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a><br>  链接 ： <a href="http://constantin.cc/2017/04/28/hello-world/" target="_blank" rel="noopener">http://constantin.cc/2017/04/28/hello-world/</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;兜兜转转，终于还是开始了&quot;&gt;&lt;a href=&quot;#兜兜转转，终于还是开始了&quot; class=&quot;headerlink&quot; title=&quot;兜兜转转，终于还是开始了&quot;&gt;&lt;/a&gt;&lt;strong&gt;兜兜转转，终于还是开始了&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;大一开始在CSDN上写博客主要是算法的一些东西，也爱上了使用markdown编辑器，之后学习前端，就开始想自己搭博客，也前前后后写了一些DEMO 但是都不满意，而且还有很多问题因为技术有限没法实现，所以就使用HEXO了，主题：&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Yilia&lt;/a&gt;，
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>宠物店服务号预约系统项目全流程记录</title>
    <link href="http://yoursite.com/2018/05/09/pet/"/>
    <id>http://yoursite.com/2018/05/09/pet/</id>
    <published>2018-05-09T08:58:37.137Z</published>
    <updated>2018-05-09T08:58:37.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求分析如图"><a href="#需求分析如图" class="headerlink" title="需求分析如图"></a>需求分析如图</h2><p><img src="/img/qxqy-need.png" alt="需求"><br><a id="more"></a></p><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>用户通过服务号菜单点击进入，获取到用户的openId，通过openId获取该用户的历史订单记录，订单状态有三个，第一个是订单提交然后等待管理员确认，第二个是管理员已经确认，等待到店服务，第三个是已经服务过的记录，被拒绝的订单只发通知不做记录。还有就是通过填写宠物洗澡和美容的预约表单进行提交，提交的表单状态为待确认表单。</p><h3 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h3><p>管理员分级，只有BOSS账号才能改变订单的状态，即接受订单或是拒绝订单，将待服务订单变为已服务，剩下的服务人员使用账号则只能查看到哪些待服务的订单</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>nuxt.js（element-ui） + express + mongodb</li><li>nuxt.js是基于Vue的SSR(服务端渲染)应用框架,集成了Vue、Vue-Router、Vuex,集成到express中当作中间件来使用，负责UI渲染部分的功能。这里我之所以选择使用nuxt，还真不是为了解决SEO和首屏加载问题，而是考虑到其爽快的开发流程，首先介绍项目的文件结构：如下图<img src="/img/qxqy-file.png" alt="文件结构">可以看到除了nuxt本身的文件结构，只需要新建一个server文件夹,然后配置nodemon，开启express的热更新，然后把nuxt当作中间引入并开启：<figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Nuxt, Builder &#125; = <span class="keyword">require</span>(<span class="string">'nuxt'</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Import and Set Nuxt.js options</span></span><br><span class="line"><span class="keyword">let</span> nuxtConfig = <span class="keyword">require</span>(<span class="string">'../nuxt.config.js'</span>)</span><br><span class="line">nuxtConfig.dev = !(process.env.NODE_ENV === <span class="string">'production'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init Nuxt.js</span></span><br><span class="line"><span class="keyword">const</span> nuxt = <span class="keyword">new</span> Nuxt(nuxtConfig)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Build only in dev mode</span></span><br><span class="line"><span class="keyword">if</span> (nuxtConfig.dev) &#123;</span><br><span class="line">  <span class="keyword">const</span> builder = <span class="keyword">new</span> Builder(nuxt)</span><br><span class="line">  builder.build()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Give nuxt middleware to express</span></span><br><span class="line">app.<span class="keyword">use</span>(nuxt.render)</span><br></pre></td></tr></table></figure></li></ul><p>这样一来借助nuxt的热更新服务，也做到前端代码的热更新，server文件夹的结构如下：<img src="/img/qxqy-file-server.png" alt="文件结构">可以看到在api里编写前后端约定交互的接口，在model里建立mongoose的Schema，在wx里封装微信的接口调用，整体开发思路很清晰，也很便捷，进行整站开发更加迅速。</p><h2 id="一些开发细节"><a href="#一些开发细节" class="headerlink" title="一些开发细节"></a>一些开发细节</h2><h3 id="使用到的微信接口记录"><a href="#使用到的微信接口记录" class="headerlink" title="使用到的微信接口记录"></a>使用到的微信接口记录</h3><ul><li>首先是验证消息是否来自微信服务器：从请求中获取到signature字段，timestamp字段，nonce，echostr字段，提取成功后将token\timestamp\nonce字符串排序得到list，使用hash加密得到hashcode，最后判断hashcode是否等于signature，是的话则说明数据源是微信后台，最后把echostr返回给微信后台去验证token，在这里我把自定义菜单设置放到了确认是微信服务器后。</li><li>自定义菜单：设置之前需要获取到全局accessToken，这个值需要自己请求并且保存，然后设置超时，超时后重新请求，在mongoose里设置超时使用如下方法：<img src="/img/ qxqy-accessToken.png" alt="需求"><a href="http://mongoosejs.com/docs/3.8.x/docs/api.html#schema-date-js" target="_blank" rel="noopener">官方文档</a><br>然后拿accessToken去更新自定义菜单。请求链接和返回值就都在微信文档里有，不再细表。<ul><li>通过网页授权获取用户的信息：这里需要通过链接进入授权页，在链接里写上服务号的appID和重定向的链接，这样在用户授权后就会跳转到你设置的链接，链接后面还会带上一个code（code说明 ： code作为换取access_token的票据，每次用户授权带上的code将不一样，code只能使用一次，5分钟未被使用自动过期。）然后通过这个code去获取网页授权access_token,与基础支持中的access_token（该access_token用于调用其他接口）不同。最后通过这个access_token获取到用户的openId，用户名等信息。</li><li>模板消息：因为需要给用户和管理员提示信息，比如告知预定成功、失败等，所以需要先配置需要使用的模板消息，然后根据模板消息ID和目标用户的openID给其发送模板消息。</li></ul></li></ul><h3 id="使用element-ui"><a href="#使用element-ui" class="headerlink" title="使用element-ui"></a>使用element-ui</h3><ul><li>UI框架使用到了<a href="http://element.eleme.io/#/zh-CN" target="_blank" rel="noopener">element-ui</a>，整个开发流程下来使用体验很棒，没有遇到什么需要记录的问题。</li></ul><h3 id="Nuxt的asyncData-方法"><a href="#Nuxt的asyncData-方法" class="headerlink" title="Nuxt的asyncData 方法"></a>Nuxt的asyncData 方法</h3><ul><li>asyncData方法会在组件（限于页面组件）每次加载之前被调用。它可以在服务端或路由更新之前被调用。 在这个方法被调用的时候，第一个参数被设定为当前页面的上下文对象，你可以利用 asyncData方法来获取数据，Nuxt.js 会将 asyncData 返回的数据融合组件 data 方法返回的数据一并返回给当前组件。</li><li>在管理员获取当前所有数据时我使用到了asyncData方法，相比在SPA在Vue或者React的mounted周期请求数据再渲染，在数据量大了之后速度提升非常明显，毕竟这也算是SSR解决首屏渲染问题的方法了。</li></ul><h3 id="微信开发工具"><a href="#微信开发工具" class="headerlink" title="微信开发工具"></a>微信开发工具</h3><ul><li>frp 搭建内网穿透，直接真机调试，详见之前的博客 <a href="http://constantin.cc/2018/01/20/frps/" target="_blank" rel="noopener">使用frp配置内网穿透</a></li><li>微信网页开发工具，因为一些跳转需要到微信中调试，但是真机没有控制台，所以直接用微信的网页开发工具。</li></ul><h3 id="基于Mongoose和bcrypt的密码验证"><a href="#基于Mongoose和bcrypt的密码验证" class="headerlink" title="基于Mongoose和bcrypt的密码验证"></a>基于Mongoose和bcrypt的密码验证</h3><ul><li><a href="http://www.html-js.com/article/1522" target="_blank" rel="noopener">详见这篇文章</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结下个人项目流程，最开始需要和甲方进行沟通，确定需求，画出需求分析图，然后再沟通看是否达到要求最终确定需求；接下来是选定技术栈，技术栈的选择就看个人经验了，毕竟做快速应用开发，效率和经验很重要，熟练来什么，这时候可以交互画一下流程图，然后把前后端接口文档写好；接下来就是项目开发，项目开发我习惯从前端页面开始，没有设计图就直接上UI框架，前端页面写好后就开始按照接口文档编写交互部分代码，按照顺序一个个接口的写过去，写完一个就调试一个，最后所有接口写完后再根据流程图做测试,最后部署上线,使用没问题后就可以交付了。</p><p><img src="/img/pet.jpg" alt="darling"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求分析如图&quot;&gt;&lt;a href=&quot;#需求分析如图&quot; class=&quot;headerlink&quot; title=&quot;需求分析如图&quot;&gt;&lt;/a&gt;需求分析如图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/qxqy-need.png&quot; alt=&quot;需求&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="项目总结" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>从 ES6 的标签( tag )函数聊起</title>
    <link href="http://yoursite.com/2018/05/09/es6-tag/"/>
    <id>http://yoursite.com/2018/05/09/es6-tag/</id>
    <published>2018-05-09T08:58:37.137Z</published>
    <updated>2018-05-09T08:58:37.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是标签-tag-函数"><a href="#什么是标签-tag-函数" class="headerlink" title="什么是标签( tag )函数"></a>什么是标签( tag )函数</h3><p>标签函数的语法就是直接在函数名后面跟上一个模板字符串，函数根据模板字符串去构造其参数，在讲构造方法前，我们先在简单看看模板字符串,通常在 JS 中编写字符串时，通常使用 （ ‘ ）或者 （ “ ），而模板字符串使用 （ ` ），例如：<br><a id="more"></a><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">'hello world'</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure></p><p>使用模板字符串的语法是：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const str3 = `hello world`</span><br></pre></td></tr></table></figure></p><p>上面这个例子看起来没多大区别，但是普通字符串和模板字符串的区别就在于模板二字，使用模板字符串我们可以在其中用 ${value} 的形式嵌入变量或者表达式，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'Constantin'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi,I\'m '</span>+ name +<span class="string">' !'</span>)  <span class="comment">//普通字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hi,I'm <span class="subst">$&#123;name&#125;</span>!`</span>) <span class="comment">//模板字符串</span></span><br></pre></td></tr></table></figure></p><p>这里不仅相比普通字符串的拼接少写了很多 + 号，还不用考虑反斜杠来处理单、双引号；还有一个好处是不用加换行符就能直接换行，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Dear Mom,\n"</span> + </span><br><span class="line">            <span class="string">"Hope you are well.\n"</span> + </span><br><span class="line">            <span class="string">"\tLove, your son"</span>) <span class="comment">//普通字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Dear Mom</span></span><br><span class="line"><span class="string">            Hope you are well!</span></span><br><span class="line"><span class="string">            ove,your son`</span>)  <span class="comment">//模板字符串</span></span><br></pre></td></tr></table></figure></p><p>模板字符串介绍结束，那么接下来我们正式来看看标签( tag )函数，刚刚我们讲到函数根据模板字符串去构造其参数，那么重点就是这个参数该怎么构造。</p><h3 id="根据模板字符串构造参数"><a href="#根据模板字符串构造参数" class="headerlink" title="根据模板字符串构造参数"></a>根据模板字符串构造参数</h3><ul><li>第一个参数是一个数组，该数组的成员是那些在模板字符串中没有变量替换的部分，简单说就是用所有由 ${} 分割的字符串，举个例子，模板字符串形式是 <code>hello ${2333} world</code>，那么第一个参数就是<code>[&#39;hello &#39;,&#39; world&#39;]</code>  </li><li>后面的参数就是所有替换的变量，举个例子，模板字符串的形式是<code>hello ${2333} world ${666}</code>，那么第二个参数就是 2333 ，第三个参数就是 666 ，以此类推。</li><li>举个完整的例子，现有如此调用的一个函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag<span class="string">`hello <span class="subst">$&#123;<span class="number">2333</span>&#125;</span> world <span class="subst">$&#123;<span class="number">666</span>&#125;</span>`</span></span><br></pre></td></tr></table></figure></li></ul><p>那么根据上述的参数构造规则，我们就可以得到这样的相同形式：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">tag</span><span class="params">([<span class="string">'hello '</span>,<span class="string">' world '</span>],<span class="number">2333</span>,<span class="number">666</span>)</span></span></span><br></pre></td></tr></table></figure></p><h3 id="一个重要的用处-过滤HTML字符串，防止用户输入恶意内容"><a href="#一个重要的用处-过滤HTML字符串，防止用户输入恶意内容" class="headerlink" title="一个重要的用处-过滤HTML字符串，防止用户输入恶意内容"></a>一个重要的用处-过滤HTML字符串，防止用户输入恶意内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sender = <span class="string">'&lt;script&gt;alert("!!!")&lt;/script&gt;'</span> <span class="comment">//输入恶意内容</span></span><br><span class="line"><span class="keyword">let</span> message = SaferHTML<span class="string">`&lt;p&gt;<span class="subst">$&#123;sender&#125;</span> has sent you a message&lt;/p&gt;`</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SaferHTML</span>(<span class="params">templateData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> s = templateData[<span class="number">0</span>] <span class="comment">//所有没有变量替换的部分</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> arg = <span class="built_in">String</span>(<span class="built_in">arguments</span>[i]) <span class="comment">//遍历所有输入内容</span></span><br><span class="line">        s+=arg.replace(<span class="regexp">/&amp;/g</span>,<span class="string">"&amp;amp"</span>).replace(<span class="regexp">/&lt;/g</span>,<span class="string">"&amp;lt"</span>).replace(<span class="regexp">/&gt;/g</span>,<span class="string">"&amp;gt"</span>) <span class="comment">//进行转义处理</span></span><br><span class="line">        s+=templateData[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message)</span><br><span class="line"><span class="comment">//&lt;p&gt;&amp;ltscript&amp;gtalert("!!!")&amp;lt/script&amp;gt has sent you a message&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h3><p>使用String.raw() 方法创建原始字符串和使用默认模板函数和字符串连接创建是一样的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">2</span>+<span class="number">3</span>&#125;</span>!`</span>;</span><br><span class="line"><span class="comment">// "Hi\\n5!"</span></span><br></pre></td></tr></table></figure></p><h3 id="解析两个例子"><a href="#解析两个例子" class="headerlink" title="解析两个例子"></a>解析两个例子</h3><p>举这两个例子的原因是，这两个例子都和其他的语法进行使用，容易造成混淆，在这里我做简单讲解和记录</p><ul><li>第一个例子<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cook</span><span class="params">(strs, <span class="rest_arg">...substs</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> substs.reduce(</span><br><span class="line">        (prev,cur,i) =&gt; prev+cur+strs[i+<span class="number">1</span>],</span><br><span class="line">        strs[<span class="number">0</span>]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span><span class="params">(times)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cook(...args).repeat(times);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(repeat(<span class="number">3</span>)`abc`)</span><br><span class="line"><span class="comment">//abcabcabc</span></span><br><span class="line">console.log(repeat(<span class="number">3</span>)`abc$&#123;<span class="number">3</span>+<span class="number">1</span>&#125;`)</span><br><span class="line"><span class="comment">//abc4abc4abc4</span></span><br></pre></td></tr></table></figure></li></ul><p>首先看到repeat函数返回了一个函数，这个函数接受参数<code>abc</code>或者<code>abc${3+1}</code>,然后将这个参数使用rest标记将参数<code>([&#39;abc&#39;],&#39;&#39;)</code>或者<code>([&#39;abc&#39;],4)</code>扩展为数组，然后再用扩展标记将数组变为用逗号分割的多个参数传递到cook函数中，其中strs表示所有没有变量替换的部分，…substs又是使用rest将所有变量替换的内容变为数组，对这个数组调用reduce生成一个和模板字符串结果一样的字符串，reduce的使用方法为：对数组所有元素按照第一个参数callback进行累计计算再传递给下个元素，第二个参数是初始值，callback第一个参数为prev，即表示前面的累计计算值，第二个参数cur表示当前元素，第三个参数i表示当前索引，最后将得到的字符串调用repeat方法重复times次得到结果。</p><ul><li>第二个例子<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cook</span>(<span class="params">strs,...substs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> substs.reduce(</span><br><span class="line">        (prev,cur,i)=&gt; prev+cur+strs[i+<span class="number">1</span>]</span><br><span class="line">        ,strs[<span class="number">0</span>]</span><br><span class="line">    )</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> one = <span class="function">(<span class="params">...args1</span>)=&gt;</span><span class="function">(<span class="params">...args2</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(...args1)</span><br><span class="line">    <span class="built_in">console</span>.log(args1)</span><br><span class="line">    <span class="keyword">return</span> cook(...args1)+cook(...args2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one<span class="string">`hello<span class="subst">$&#123;<span class="number">123</span>&#125;</span>`</span><span class="string">`world`</span>)</span><br><span class="line"><span class="comment">//hello123world</span></span><br></pre></td></tr></table></figure></li></ul><p>这个例子同第一个例子一样的思路，只不过其将模板函数作为返回值，然后再调用模板函数，所以才使用了链式箭头函数的方法，需要注意的地方还是rest标记和扩展标记不能搞混了。</p><h3 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/31687266?utm_source=com.tencent.tim&amp;utm_medium=social" target="_blank" rel="noopener">ES6-标签函数</a></li><li><a href="https://www.cnblogs.com/sminocence/p/6832331.html" target="_blank" rel="noopener">ES6标签模板</a>  </li><li><a href="https://www.cnblogs.com/chrischjh/p/4848934.html" target="_blank" rel="noopener">妙用ES6解构和扩展运算符让你的代码更优雅</a>  </li><li><a href="http://es6.ruanyifeng.com/?search=rest&amp;x=0&amp;y=0#docs/function#rest-参数" target="_blank" rel="noopener">阮一峰ES6-rest参数</a>  </li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">MDN模板字符串</a></li></ul><p><img src="/img/es6-tag.png" alt="りん"></p><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是标签-tag-函数&quot;&gt;&lt;a href=&quot;#什么是标签-tag-函数&quot; class=&quot;headerlink&quot; title=&quot;什么是标签( tag )函数&quot;&gt;&lt;/a&gt;什么是标签( tag )函数&lt;/h3&gt;&lt;p&gt;标签函数的语法就是直接在函数名后面跟上一个模板字符串，函数根据模板字符串去构造其参数，在讲构造方法前，我们先在简单看看模板字符串,通常在 JS 中编写字符串时，通常使用 （ ‘ ）或者 （ “ ），而模板字符串使用 （ ` ），例如：&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>一道柯里化函数问题</title>
    <link href="http://yoursite.com/2018/05/09/curry/"/>
    <id>http://yoursite.com/2018/05/09/curry/</id>
    <published>2018-05-09T08:58:37.136Z</published>
    <updated>2018-05-09T08:58:37.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题来自30-seconds-of-code"><a href="#问题来自30-seconds-of-code" class="headerlink" title="问题来自30-seconds-of-code"></a>问题来自<a href="https://github.com/Chalarangelo/30-seconds-of-code#curry" target="_blank" rel="noopener">30-seconds-of-code</a></h3><h3 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下:"></a>题目如下:</h3><p>Use recursion. If the number of provided arguments (args) is sufficient, call the passed function f. Otherwise return a curried function f that expects the rest of the arguments. If you want to curry a function that accepts a variable number of arguments (a variadic function, e.g. Math.min()), you can optionally pass the number of arguments to the second parameter arity.</p><a id="more"></a><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h3><p>使用柯里化的方法给一个指定的函数链式传参并返回执行结果，参数长度可控，例如Math.pow需要2个参数，那么就递归的方法依次传入2,10然后返回执行结果。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><p>首先是声明柯里函数:curry，第一个参数表示需要传参执行的函数，然后使用自调用方法传入参数数组初值[]，并返回一个函数接受第一个参数，这时候next函数中的prevArgs是[]，返回的新函数传入(2),参数数组变为[2]，因为Math.pow需要的是两个参数，所以继续调用next，接着返回新的函数传入(10)，最后参数数组变为[2,10]，并执行Math.pow(2,10)最后返回1024</p><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析:"></a>代码解析:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function">(<span class="params">f, arity = f.length</span>) =&gt;</span>  <span class="comment">//f.length表示f的形参数目</span></span><br><span class="line">(next = <span class="function"><span class="params">prevArgs</span> =&gt;</span></span><br><span class="line">  nextArg =&gt; &#123;              <span class="comment">//返回函数接受下一个参数</span></span><br><span class="line">    <span class="keyword">const</span> args = [ ...prevArgs, nextArg ];</span><br><span class="line">    <span class="keyword">return</span> args.length &gt;= arity ? f(...args) : next(args);</span><br><span class="line">    <span class="comment">//如果参数长度达到需求长度则将现有参数传入f执行，否则将现有参数作传入下个next做为prevArgs</span></span><br><span class="line">  &#125;</span><br><span class="line">)([]);                      <span class="comment">//自调用传入[]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(curry(<span class="built_in">Math</span>.pow)(<span class="number">2</span>)(<span class="number">10</span>))  <span class="comment">//1024</span></span><br><span class="line"><span class="built_in">console</span>.log(curry(<span class="built_in">Math</span>.min,<span class="number">3</span>)(<span class="number">10</span>)(<span class="number">50</span>)(<span class="number">2</span>))  <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>简易写法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">f,arity=f.length</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> next = <span class="function"><span class="keyword">function</span>(<span class="params">prevArgs</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">nextArgs</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> args = [...prevArgs,nextArgs];</span><br><span class="line">            <span class="keyword">return</span> args.length &gt;= arity ? f(...args) : next(args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next([])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(curry(<span class="built_in">Math</span>.pow)(<span class="number">2</span>)(<span class="number">10</span>))  <span class="comment">//1024</span></span><br><span class="line"><span class="built_in">console</span>.log(curry(<span class="built_in">Math</span>.min,<span class="number">3</span>)(<span class="number">10</span>)(<span class="number">50</span>)(<span class="number">2</span>))  <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题来自30-seconds-of-code&quot;&gt;&lt;a href=&quot;#问题来自30-seconds-of-code&quot; class=&quot;headerlink&quot; title=&quot;问题来自30-seconds-of-code&quot;&gt;&lt;/a&gt;问题来自&lt;a href=&quot;https://github.com/Chalarangelo/30-seconds-of-code#curry&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;30-seconds-of-code&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;题目如下&quot;&gt;&lt;a href=&quot;#题目如下&quot; class=&quot;headerlink&quot; title=&quot;题目如下:&quot;&gt;&lt;/a&gt;题目如下:&lt;/h3&gt;&lt;p&gt;Use recursion. If the number of provided arguments (args) is sufficient, call the passed function f. Otherwise return a curried function f that expects the rest of the arguments. If you want to curry a function that accepts a variable number of arguments (a variadic function, e.g. Math.min()), you can optionally pass the number of arguments to the second parameter arity.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个二级结构的CMS(内容管理系统)</title>
    <link href="http://yoursite.com/2018/05/09/cms/"/>
    <id>http://yoursite.com/2018/05/09/cms/</id>
    <published>2018-05-09T08:58:37.136Z</published>
    <updated>2018-05-09T08:58:37.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a><strong>项目简介</strong></h2><p>&nbsp;&nbsp;主要功能是汇总统计二级用户上传的Excel表单。原有项目是很老的C/S系统，需要管理员手动进行文件上传而且没有实现文件正确性校验，所以这次重新更新为B/S系统，修改为二级结构，并添加文件正确性校验。项目为二级结构，一级结构为管理员，管理员能对二级单位的信息进行增、删、改，并选择时间开启系统和关闭系统，最后汇总统计由二级机构上传的Excel文件，得到最后的统计结果并下载。二级机构使用线下发放的账号密码登陆，下载模板文件，然后根据模板文件的内容填写完毕后上传至服务器，进行文件正确性校验和功能校验，判断是否符合填写要求，给出反馈，保存文件。</p><hr><a id="more"></a><h2 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a><strong>使用的技术</strong></h2><ul><li>前端：  <ul><li>react/redux(数据状态管理)/react-router(路由)/webpack</li></ul></li><li>后端：<ul><li>express(node框架)/mongoose(数据库)</li></ul></li><li>服务器：<ul><li>pm2/nginx</li></ul></li></ul><hr><h2 id="总结及技术细节讲解"><a href="#总结及技术细节讲解" class="headerlink" title="总结及技术细节讲解"></a><strong>总结及技术细节讲解</strong></h2><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>&nbsp;&nbsp;这个项目前后花了20天时间，因为是内部使用的系统所以不方便开源了；这里我简单做一个总结，并写写在开发过程中遇到的一些问题。这次写法还是采用比较熟练的前后端分离写法，一开始分析好需求，然后构建RESTful API,就开始从前端开始写了，写前端还好，比较熟练，但是也在写redux的时候遇到些问题，具体表现为有的状态始终检测不到更新，以及异步请求的部分还不熟练，试着调试了两天没解决，想到Redux作者说过:</p><blockquote><p>“只有遇到 React 实在解决不了的问题，你才需要 Redux 。”</p></blockquote><p>所以担心项目的稳定性，我重新构建了一下React的组件，把redux给去除了，毕竟项目数据量不算大，react完全能胜任了。前端完成后，接着写后端，每实现一个功能就和前端进行对接测试，这个过程还挺有意思的，有时候出了bug一时间摸不清到底是前端出了问题还是后端，就一点点的去排除，这种没法互相甩锅的情况也是挺有趣的。还有就是后端这边的核心功能就是Excel的处理，这次也学习到了许多node处理excel的方法，接下来会做一个讲解。</p><h3 id="部分技术细节："><a href="#部分技术细节：" class="headerlink" title="部分技术细节："></a>部分技术细节：</h3><ul><li><p>前端路由：  </p><ul><li>使用react-router的HashRouter，而不是使用BrowserRouter是因为其重定向只能到首页，无法停留在当前页，还有就是使用了基于HTML5的pushState和replaceState，存在兼容性问题。</li></ul></li><li><p>异步请求：  </p><ul><li><p>使用fetch，好处是能够向promise那样链式使用，解决兼容性问题需要使用’isomorphic-fetch’和’es6-promise’这两个包，还需要注意fetch不会自带cookie,所以需要在请求中加入</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">credentials:</span> <span class="string">'include'</span></span><br></pre></td></tr></table></figure><p>如果是本地调试还要在后端设置下跨域：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.set(&#123;</span><br><span class="line">    'Access-Control-Allow-Origin': 'http://localhost:<span class="number">8080</span>',</span><br><span class="line">    'Access-Control-Allow-Credentials': 'true'</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文件上传：  </p><ul><li><p>前端部分：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"file"</span> accept=<span class="string">".xlsx"</span> onChange=&#123;<span class="keyword">this</span>.handleChangeFile&#125;/&gt;</span><br></pre></td></tr></table></figure><p>在这里选择文件的变化，然后在上传时使用FormData异步上传</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let formData = new FormData();</span><br><span class="line">formData.append(<span class="string">"filedata"</span>,this.<span class="keyword">state</span>.file[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li><li><p>后端部分：<br>使用multer这个文件上传中间件，配置代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">let</span> storage = multer.diskStorage(&#123;</span><br><span class="line">    destination:<span class="function"><span class="keyword">function</span>(<span class="params">req,file,cb</span>)</span>&#123;</span><br><span class="line">        cb(<span class="literal">null</span>,<span class="string">'./excel'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    filename:<span class="function"><span class="keyword">function</span>(<span class="params">req,file,cb</span>)</span>&#123;</span><br><span class="line">        cb(<span class="literal">null</span>,file.originalname);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> upload = multer(&#123;</span><br><span class="line">    storage:storage</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = upload;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/user/file'</span>, upload.single(<span class="string">'filedata'</span>), <span class="function"><span class="keyword">function</span> <span class="params">(req, res, next)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>解决contentEditable属性的Warning  </p><ul><li><p>在使用contentEditable这个属性将当前区域变为可编辑区域时，会有这样的warning出现：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A component <span class="keyword">is</span> contentEditable <span class="keyword">and</span> <span class="keyword">contains</span> children managed <span class="keyword">by</span> React. It <span class="keyword">is</span> now your responsibility <span class="keyword">to</span> guarantee <span class="keyword">that</span> none <span class="keyword">of</span> those nodes are unexpectedly modified <span class="keyword">or</span> duplicated. This <span class="keyword">is</span> probably <span class="keyword">not</span> intentional.</span><br></pre></td></tr></table></figure><p>由于使用了多个这样的属性，所以必须要解决这个出现的warning，然后我去翻看了react的github，在issue里面找到了相关的问答，其中在<a href="https://github.com/facebook/react/issues/5837" target="_blank" rel="noopener">#5837</a>中看到大佬们的相关讨论，随后又找到了<a href="https://github.com/facebook/react/pull/6112" target="_blank" rel="noopener">#6112</a>就彻底解决了这个warning，就是在有contentEditable属性的标签中加入<code>suppressContentEditableWarning</code>这个属性就解决了。</p></li></ul></li><li><p>node处理Excel表格：  </p><ul><li>这次熟悉了node处理excel的一些操作，首先的就是使用<code>node-xlsx</code>，这个包可以对excel里的数据进行解析处理，非常的方便实现了数据的校验，查看数据填写是否符合要求，并及时的给出反馈。</li><li>还找了一个能将处理好的数据渲染到模板excel上的神器，叫<a href="https://github.com/sail-sail/ejsExcel" target="_blank" rel="noopener">ejsexcel</a>,其如同node的服务器渲染模板ejs一般，你只需要在模板excel里面写好对应的规则，然后在渲染时使用此规则就能将数据渲染到上面去，所以非常的方便的保留excel的模板，不至于在输出数据生成最后的结果excel时打乱已经写好的格式。</li></ul></li></ul><ul><li>使用解释器校验excel内容及统计文件内容：  <ul><li>在校验文件内容时，考虑到这些校验的规则随时可能修改，所以就写了一个内部解释器，管理员在修改规则时，只需要修改规则的配置文件，不用我们去修改代码，解释器会根据修改好配置文件进行执行，而之后的汇总处理中也使用的相同的思想，如有改动就只需要去修改配置文件的内容，而不用修改相应的代码；</li></ul></li></ul><hr><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a><strong>最后</strong></h2><p>&nbsp;&nbsp;这个项目下来，收获挺大的，主要是对前后端写法的项目有了比较通透了解，但是也局限于这种写法，由于其他很多的写法尚没有了解，比如Java和Python，所以依旧需要学习很多，还有就是发现了很多基础依旧不牢固，这也是接下来一段事情了，得抽空重新去夯实基础的知识。<br>总之还是</p><blockquote><p>“路漫漫其修远兮，吾将上下而求索。”</p></blockquote><p><img src="/img/cms.jpg" alt="cms"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a><br>链接 ： <a href="http://constantin.cc/2017/09/18/cms/" target="_blank" rel="noopener">http://constantin.cc/2017/09/18/cms/</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;项目简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;主要功能是汇总统计二级用户上传的Excel表单。原有项目是很老的C/S系统，需要管理员手动进行文件上传而且没有实现文件正确性校验，所以这次重新更新为B/S系统，修改为二级结构，并添加文件正确性校验。项目为二级结构，一级结构为管理员，管理员能对二级单位的信息进行增、删、改，并选择时间开启系统和关闭系统，最后汇总统计由二级机构上传的Excel文件，得到最后的统计结果并下载。二级机构使用线下发放的账号密码登陆，下载模板文件，然后根据模板文件的内容填写完毕后上传至服务器，进行文件正确性校验和功能校验，判断是否符合填写要求，给出反馈，保存文件。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="项目总结" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>使用Webpack配置CSS预编译器Less+后处理器Postcss的Autoprefixer功能</title>
    <link href="http://yoursite.com/2018/05/09/Postcss/"/>
    <id>http://yoursite.com/2018/05/09/Postcss/</id>
    <published>2018-05-09T08:58:37.135Z</published>
    <updated>2018-05-09T08:58:37.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是预处理器？什么又是后处理器？"><a href="#什么是预处理器？什么又是后处理器？" class="headerlink" title="什么是预处理器？什么又是后处理器？"></a>什么是预处理器？什么又是后处理器？</h2><h3 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h3><p>CSS预处理器定义了一种新的语言，基本的思想是用一种专门的编程语言，开发者只需要使用这种语言进行编码工作，减少枯燥无味的CSS代码的编写过程的同时，它能让你的CSS具备更加简洁、适应性更强、可读性更加、层级关系更加明显、更易于代码的维护等诸多好处。常用的有Less、Sass、Stylus.</p><h3 id="后处理器"><a href="#后处理器" class="headerlink" title="后处理器"></a>后处理器</h3><p>在使用预处理器将我们编写的less文件变成css文件后，PostCSS把css解析成抽象语法树（AST），通过一系列的插件，然后重新编译成一个字符串。可以把PostCSS类比为CSS的Babel，主要使用的就是一系列有用插件，这里我用Autoprefixer这个可以生成浏览器前缀的插件为例进行配置。</p><a id="more"></a><hr><h2 id="配置目标"><a href="#配置目标" class="headerlink" title="配置目标"></a>配置目标</h2><p>让CSS预编译器Less和后处理器Postcss能协同使用，即Less编译后再接Postcss的Autoprefixer实现自动添加浏览器前缀。</p><hr><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>先来看看写好的less文件和最终通过webpack打包生成的文件对比：</p><p><img src="/img/lessBefore.png" alt="我们编写的less"></p><p>我们编写的less</p><p><img src="/img/lessAfter.png" alt="打包生成的文件"></p><p>打包生成的文件</p><p>对比可以看到，通过less-loader和postcss-loader的作用，less文件已经成功的生成css文件，而且其中自动添加上了相应的浏览器前缀，通过这样的配置就可以使用其他丰富的postcss插件了。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>首先是通过<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> postcss-loader</span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> autoprefixer</span><br></pre></td></tr></table></figure></p><p>安装好postcss和autoprefixer,<br>然后在webpack.config.js文件中如下配置：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">test</span>: /\.less$/,</span><br><span class="line">    loader: ExtractTextPlugin.<span class="built_in">extract</span>(&#123;</span><br><span class="line">        fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">            use: [<span class="string">'css-loader'</span>,<span class="string">'postcss-loader'</span>,<span class="string">'less-loader'</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>一定要记得postcss-loader要在less-loader后面使用；</p><p>然后是在根目录下创建：postcss.config.js文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      require(<span class="string">'autoprefixer'</span>)(&#123; <span class="comment">/*options*/</span> &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>options可以写对浏览器兼容性的一些需求如：</p><p> <code>last 2 versions or &gt; 5%.</code></p><p>这样简单的配置示例就完成了，如有其它postcss插件的需求也可以相应的在配置文件中添加。</p><p><img src="/img/postcss.png" alt="POSTCSS"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a><br>链接 ： <a href="http://constantin.cc/2017/09/04/Postcss/" target="_blank" rel="noopener">http://constantin.cc/2017/09/04/Postcss/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是预处理器？什么又是后处理器？&quot;&gt;&lt;a href=&quot;#什么是预处理器？什么又是后处理器？&quot; class=&quot;headerlink&quot; title=&quot;什么是预处理器？什么又是后处理器？&quot;&gt;&lt;/a&gt;什么是预处理器？什么又是后处理器？&lt;/h2&gt;&lt;h3 id=&quot;预处理器&quot;&gt;&lt;a href=&quot;#预处理器&quot; class=&quot;headerlink&quot; title=&quot;预处理器&quot;&gt;&lt;/a&gt;预处理器&lt;/h3&gt;&lt;p&gt;CSS预处理器定义了一种新的语言，基本的思想是用一种专门的编程语言，开发者只需要使用这种语言进行编码工作，减少枯燥无味的CSS代码的编写过程的同时，它能让你的CSS具备更加简洁、适应性更强、可读性更加、层级关系更加明显、更易于代码的维护等诸多好处。常用的有Less、Sass、Stylus.&lt;/p&gt;
&lt;h3 id=&quot;后处理器&quot;&gt;&lt;a href=&quot;#后处理器&quot; class=&quot;headerlink&quot; title=&quot;后处理器&quot;&gt;&lt;/a&gt;后处理器&lt;/h3&gt;&lt;p&gt;在使用预处理器将我们编写的less文件变成css文件后，PostCSS把css解析成抽象语法树（AST），通过一系列的插件，然后重新编译成一个字符串。可以把PostCSS类比为CSS的Babel，主要使用的就是一系列有用插件，这里我用Autoprefixer这个可以生成浏览器前缀的插件为例进行配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>一个带AI的俄罗斯方块游戏</title>
    <link href="http://yoursite.com/2018/05/09/TetrisWithAI/"/>
    <id>http://yoursite.com/2018/05/09/TetrisWithAI/</id>
    <published>2018-05-09T08:58:37.135Z</published>
    <updated>2018-05-09T08:58:37.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="来自实验周的锅"><a href="#来自实验周的锅" class="headerlink" title="来自实验周的锅"></a>来自实验周的锅</h2><p>上周算法实验周，老师给了一堆带AI的游戏题目，本来准备写以前写过的贪吃蛇，但是手慢被抢走了，然后就选择了俄罗斯方块，怎料光写俄罗斯方块这个游戏就很有挑战了/(ㄒoㄒ)/~~，倒是游戏写完后的AI还没怎么费神。<br><a id="more"></a></p><hr><h2 id="选择与学习"><a href="#选择与学习" class="headerlink" title="选择与学习"></a>选择与学习</h2><p>因为老师并没有限制语言和实现方法，我很开心的选择了用React撸一个网页出来,网页便捷的交互事件和状态更新触发渲染绘图用起来不要太方便，这一套也算是比较熟悉，在寻找相关资料的时候发现了有大佬已经写过一个<a href="https://www.hoyt-tian.com/tag/tetris/" target="_blank" rel="noopener">链接在此</a>,找到大佬的Github，然后开始学习，大佬代码没怎么注释，而且旋转系统也还有BUG，我找到了旋转系统的写法(链接在此)，然后算法是使用遗传算法训练相应权值，且听我一步一步道来。<br>源码地址在此：<a href="https://github.com/uselessaddress/TetrisWithAI" target="_blank" rel="noopener">https://github.com/uselessaddress/TetrisWithAI</a><br>训练的源码：<a href="https://github.com/uselessaddress/TetrisAITraining" target="_blank" rel="noopener">https://github.com/uselessaddress/TetrisAITraining</a></p><hr><h2 id="先来看看最后的效果"><a href="#先来看看最后的效果" class="headerlink" title="先来看看最后的效果"></a>先来看看最后的效果</h2><p><img src="/img/Tetris.png" alt="Tetris"></p><hr><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>实现一个经典版本的俄罗斯方块游戏</li><li>游戏包含最经典的Tetris形状（7种），同时支持方便的扩展其他形状，Tetris可以移动、变形</li><li>可以切换游戏模式，由人控制或者AI控制，人操控时，每隔一定时间若无输入，Tetris自然落下一格;AI控制时，需要模拟人类的操作过程</li></ul><hr><h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><ol><li>视图部分：由小到大，Tile(每个小方块)-&gt;Tetris(由几个小块组成的一种方块)-&gt;预览画板-&gt;游戏画板(一个10*20的标准游戏区域)，画图部分使用H5的Cancas</li><li>控制部分：重置按钮，用于刷新重置整个游戏；暂停按钮，用于暂停游戏；AI控制按钮：点击可以切换是人工控制还是AI控制，默认是人工控制</li><li>视图绑定的数据：画板初始化为值为null二维矩阵，Tetris是由二维矩阵保存的一个俄罗斯方块，Tile只需保存当前块颜色</li></ol><hr><h2 id="分步讲解"><a href="#分步讲解" class="headerlink" title="分步讲解"></a>分步讲解</h2><ol><li>视图：<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个小方块</span></span><br><span class="line">class Tile&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">get</span>(<span class="built_in">color</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!tiles[<span class="built_in">color</span>])&#123;</span><br><span class="line">            tiles[<span class="built_in">color</span>] = <span class="keyword">new</span> Tile(<span class="built_in">color</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tiles[<span class="built_in">color</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    constructor(<span class="built_in">color</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">color</span> = <span class="built_in">color</span> || ColorPicker.<span class="built_in">random</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可以看到这里只用保存每个方块的颜色即可</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方块对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tetris</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(matrix,color) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">data</span> = Tetris.clone(matrix);</span><br><span class="line">        <span class="keyword">this</span>.color = color || ColorPicker.random();</span><br><span class="line">        <span class="keyword">this</span>.row = <span class="keyword">this</span>.col = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ..............</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取指定的形状</span></span><br><span class="line">    static shape(i)&#123;</span><br><span class="line">        <span class="keyword">return</span> shapes[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取形状的总数</span></span><br><span class="line">    static shapeCount()&#123;</span><br><span class="line">        <span class="keyword">return</span> shapes.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// * 设置位置</span></span><br><span class="line">    setPos(row,col)&#123;</span><br><span class="line">        <span class="keyword">this</span>.row = row;</span><br><span class="line">        <span class="keyword">this</span>.col = col;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取传入的行列值对应位置的tile</span></span><br><span class="line">    getTile(row,col)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.<span class="keyword">data</span>[row][col]!==<span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">return</span> Tile.<span class="keyword">get</span>(<span class="keyword">this</span>.color);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// * 当前宽度是传入方块的高度</span></span><br><span class="line">    width()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">data</span>[<span class="number">0</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// * 当前高度是传入方块的宽度</span></span><br><span class="line">    height()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">data</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺时针旋转</span></span><br><span class="line">    clockwise()&#123;</span><br><span class="line">        let w = <span class="keyword">this</span>.width(),h = <span class="keyword">this</span>.height();</span><br><span class="line">        <span class="comment">//w是之前的列数，h是之前的行数</span></span><br><span class="line">        <span class="comment">//用之前的列数对应当前的行数</span></span><br><span class="line">        <span class="comment">//用之前的行数对应到当前的列数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>((w===<span class="number">1</span>&amp;&amp;h===<span class="number">4</span>)||(w===<span class="number">4</span>&amp;&amp;h===<span class="number">1</span>))&#123;</span><br><span class="line">            let preData = buildMatrix(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">            let nextData = buildMatrix(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">if</span>(w===<span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(let j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(i===<span class="number">1</span>)&#123;</span><br><span class="line">                            </span><br><span class="line">                            preData[<span class="number">1</span>][j] = <span class="keyword">this</span>.<span class="keyword">data</span>[<span class="number">0</span>][j];</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            preData[i][j] = <span class="string">'0'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(let row = <span class="number">0</span>;row &lt; <span class="number">4</span>;row++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(let col = <span class="number">0</span>;col &lt; <span class="number">4</span>;col++)&#123;</span><br><span class="line">                        nextData[col][<span class="number">3</span>-row] = preData[row][col]</span><br><span class="line">                        <span class="comment">// console.log(col,3-row)</span></span><br><span class="line">                         <span class="comment">/*顺时针旋转规则：</span></span><br><span class="line"><span class="comment">                            当前的行数等于之前的列数</span></span><br><span class="line"><span class="comment">                            当前的列等于之前的总行数-之前的列数</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              </span><br><span class="line">                <span class="keyword">return</span> nextData;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(w===<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                   <span class="keyword">for</span>(let j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                       <span class="keyword">if</span>(j === <span class="number">2</span>)&#123;</span><br><span class="line">                            preData[i][<span class="number">2</span>] = <span class="keyword">this</span>.<span class="keyword">data</span>[i][<span class="number">0</span>]</span><br><span class="line">                       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            preData[i][j] = <span class="string">'0'</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// console.log(preData)</span></span><br><span class="line">                <span class="keyword">for</span>(let row = <span class="number">0</span>;row &lt; <span class="number">4</span>;row++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(let col = <span class="number">0</span>;col &lt; <span class="number">4</span>;col++)&#123; </span><br><span class="line">                        nextData[col][<span class="number">3</span>-row] = preData[row][col]</span><br><span class="line">                         <span class="comment">/*顺时针旋转规则：</span></span><br><span class="line"><span class="comment">                            当前的行数等于之前的列数</span></span><br><span class="line"><span class="comment">                            当前的列等于之前的总行数-之前的列数</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// console.log(nextData)</span></span><br><span class="line">                <span class="keyword">return</span> nextData;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let nextData = buildMatrix(w,h);</span><br><span class="line">        <span class="keyword">for</span>(let row = <span class="number">0</span>;row &lt; h;row++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(let col = <span class="number">0</span>;col &lt; w;col++)&#123;</span><br><span class="line">                nextData[col][h<span class="number">-1</span>-row] = <span class="keyword">this</span>.<span class="keyword">data</span>[row][col]</span><br><span class="line">                 <span class="comment">/*顺时针旋转规则：</span></span><br><span class="line"><span class="comment">                    当前的行数等于之前的列数</span></span><br><span class="line"><span class="comment">                    当前的列等于之前的总行数-之前的列数</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逆时针旋转规则</span></span><br><span class="line">    anticlockwise()&#123;</span><br><span class="line">        let w = <span class="keyword">this</span>.width(),h = <span class="keyword">this</span>.height();</span><br><span class="line">        let nextData = buildMatrix(w,h)</span><br><span class="line">        <span class="keyword">for</span>(let row = <span class="number">0</span>;row &lt; h;row++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(let col = <span class="number">0</span>;col &lt; w;col++)&#123;</span><br><span class="line">                nextData[w<span class="number">-1</span>-col][row] = <span class="keyword">this</span>.<span class="keyword">data</span>[row][col]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//旋转</span></span><br><span class="line">    turn(clockwise,rows,cols)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.col + <span class="keyword">this</span>.height() &gt; cols || <span class="keyword">this</span>.row + <span class="keyword">this</span>.width() &gt; rows)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        </span><br><span class="line">        let nextData = clockwise?<span class="keyword">this</span>.clockwise():<span class="keyword">this</span>.anticlockwise()</span><br><span class="line">        let w = <span class="keyword">this</span>.width(),h = <span class="keyword">this</span>.height()</span><br><span class="line"></span><br><span class="line">        let result = &#123;</span><br><span class="line">            before : <span class="keyword">this</span>.<span class="keyword">data</span>,</span><br><span class="line">            after:nextData</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">data</span> = nextData;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是Tetris的关键部分，可以看到对长条的旋转进行了特殊处理，先将其放到为4*4的矩阵里，然后再旋转，就像下图这样<br><img src="/img/line.png" alt="line">，在Tetris里有两个地方需要理解，第一个是相对位置，Tetris相对于游戏画板左上角距离的行列值，这个位置值用于在游戏画板中绘制当前Tetris，还有就是旋转操作，顺时针旋转规则：当前的行数等于之前的列数， 当前的列等于之前的总行数-之前的行数；逆时针旋转规则：当前的列数等于之前的行数，当前的行数等于之前的总列数-之前的列数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//画布区域</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grid</span> <span class="title">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            <span class="keyword">data</span>:props.<span class="keyword">data</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidUpdate() &#123;</span><br><span class="line">        </span><br><span class="line">        let context = <span class="keyword">this</span>.refs.canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        context.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.refs.canvas.width,<span class="keyword">this</span>.refs.canvas.height)</span><br><span class="line">        let tile = <span class="literal">null</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.<span class="keyword">data</span> &amp;&amp; <span class="keyword">this</span>.state.<span class="keyword">data</span>.length &amp;&amp; <span class="keyword">this</span>.state.<span class="keyword">data</span>[<span class="number">0</span>].length)&#123;</span><br><span class="line">            <span class="keyword">for</span>(let row = <span class="number">0</span>;row &lt; <span class="keyword">this</span>.state.<span class="keyword">data</span>.length<span class="number">-2</span>;row++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(let col = <span class="number">0</span>;col &lt; <span class="keyword">this</span>.state.<span class="keyword">data</span>[row].length;col++)&#123;</span><br><span class="line">                    tile = <span class="keyword">this</span>.state.<span class="keyword">data</span>[row][col];</span><br><span class="line">                    <span class="keyword">if</span>(tile == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    context.fillStyle = tile.color;</span><br><span class="line">                    context.fillRect(</span><br><span class="line">                        (col<span class="number">-2</span>) * TileWidth,</span><br><span class="line">                        row * TileHeight,</span><br><span class="line">                        TileWidth-TilePadding,</span><br><span class="line">                        TileHeight-TilePadding</span><br><span class="line">                    )</span><br><span class="line">                    <span class="comment">//绘制图形的四个参数依次为：相对右上角的x坐标，相对左上角的x坐标，宽度，高度</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ? 还有疑问</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.active)&#123;</span><br><span class="line">            context.fillStyle = ColorPicker.activeColor();</span><br><span class="line">            <span class="keyword">for</span>(let row = <span class="number">0</span>;row &lt; <span class="keyword">this</span>.state.active.height();row++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(let col = <span class="number">0</span>;col &lt; <span class="keyword">this</span>.state.active.width();col++)&#123;</span><br><span class="line">                    tile = <span class="keyword">this</span>.state.active.getTile(row,col);</span><br><span class="line">                    <span class="keyword">if</span>(tile)&#123;</span><br><span class="line">                        context.fillStyle = tile.color;</span><br><span class="line">                        context.fillRect(</span><br><span class="line">                            (<span class="keyword">this</span>.state.active.col<span class="number">-2</span>+col)*TileWidth,</span><br><span class="line">                            (<span class="keyword">this</span>.state.active.row+row)*TileHeight,</span><br><span class="line">                            TileWidth - TilePadding,</span><br><span class="line">                            TileHeight - TilePadding</span><br><span class="line">                        )</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="comment">//创建canvans元素</span></span><br><span class="line">        <span class="keyword">return</span> React.createElement(<span class="string">'canvas'</span>,&#123;</span><br><span class="line">            ref : <span class="string">'canvas'</span>,</span><br><span class="line">            width:(<span class="keyword">this</span>.props.cols<span class="number">-4</span>) * TileWidth,</span><br><span class="line">            height: (<span class="keyword">this</span>.props.rows<span class="number">-2</span>) * TileHeight</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是绘制游戏画布的过程。<br>接下来是控制部分</p><ol start="2"><li>游戏控制部分<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建方块</span></span><br><span class="line">  dropNew = ()=&gt;&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(<span class="string">"new"</span>)</span><br><span class="line">      let next = <span class="keyword">this</span>.setPreviewPosition(Tetris.random());</span><br><span class="line">      let active = <span class="keyword">this</span>.state.next?<span class="keyword">this</span>.setNewTetrisPosition(<span class="keyword">this</span>.state.next):<span class="keyword">this</span>.setNewTetrisPosition(Tetris.random());</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          active:active,</span><br><span class="line">          next:next</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.refs.preview.setState(&#123;</span><br><span class="line">          active:next</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.refs.main.setState(&#123;</span><br><span class="line">          <span class="keyword">data</span>:<span class="keyword">this</span>.state.<span class="keyword">data</span>,</span><br><span class="line">          active: active</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.timer_input == <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">this</span>.timer_input = window.setTimeout(<span class="keyword">this</span>.autoDrop.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.interval_input)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p>新掉落方块，更新当前active砖块，this.state.data是保存残留方块</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按下键触发的相应事件</span></span><br><span class="line">    doAction=(keyCode)=&gt;&#123;</span><br><span class="line">        <span class="comment">// console.log(this.state.active)</span></span><br><span class="line">        let r = <span class="literal">null</span></span><br><span class="line">        switch(keyCode)&#123;</span><br><span class="line">            case <span class="number">0x25</span>: <span class="comment">//left</span></span><br><span class="line">                <span class="keyword">this</span>.moveActiveLeft();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case <span class="number">0x27</span>: <span class="comment">//right</span></span><br><span class="line">                <span class="keyword">this</span>.moveActiveRight();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case <span class="number">0x20</span>: <span class="comment">//speed up</span></span><br><span class="line">                r = <span class="keyword">this</span>.moveActiveDown();</span><br><span class="line">                <span class="keyword">if</span>(r == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.gameover()  </span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(r === <span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.merge(<span class="keyword">this</span>.state.active);</span><br><span class="line">                    <span class="keyword">this</span>.state.score += <span class="keyword">this</span>.clear();</span><br><span class="line">                    <span class="keyword">this</span>.state.total ++;</span><br><span class="line">                    <span class="keyword">this</span>.dropNew()</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(r &amp;&amp; <span class="keyword">this</span>.useAI)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                        <span class="keyword">data</span>:<span class="keyword">this</span>.state.<span class="keyword">data</span>,</span><br><span class="line">                        active: <span class="keyword">this</span>.state.active,</span><br><span class="line">                        total: <span class="keyword">this</span>.state.total,</span><br><span class="line">                        score: <span class="keyword">this</span>.state.score</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">this</span>.refs.main.setState(&#123;</span><br><span class="line">                        <span class="keyword">data</span>: <span class="keyword">this</span>.state.<span class="keyword">data</span>,</span><br><span class="line">                        active: <span class="keyword">this</span>.state.active</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">this</span>.refs.preview.setState(&#123;</span><br><span class="line">                        active: <span class="keyword">this</span>.state.next</span><br><span class="line">                    &#125;);</span><br><span class="line">                    window.setTimeout( <span class="keyword">this</span>.aiStep.bind(<span class="keyword">this</span>), <span class="keyword">this</span>.interval_ai);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case <span class="number">0x26</span>: <span class="comment">//up anticlockwise</span></span><br><span class="line">                r = <span class="keyword">this</span>.state.active.turn(<span class="literal">false</span>,<span class="keyword">this</span>.rows,<span class="keyword">this</span>.cols);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(r &amp;&amp; Game.testCollsion(<span class="keyword">this</span>.state.<span class="keyword">data</span>, <span class="keyword">this</span>.state.active))&#123;</span><br><span class="line">                    <span class="keyword">this</span>.state.active.turn(<span class="literal">true</span>, <span class="keyword">this</span>.rows, <span class="keyword">this</span>.cols);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case <span class="number">0x28</span>: <span class="comment">//down clockwise</span></span><br><span class="line">                r = <span class="keyword">this</span>.state.active.turn(<span class="literal">true</span>, <span class="keyword">this</span>.rows, <span class="keyword">this</span>.cols);</span><br><span class="line">                <span class="keyword">if</span>(r &amp;&amp; Game.testCollsion(<span class="keyword">this</span>.state.<span class="keyword">data</span>, <span class="keyword">this</span>.state.active))&#123;</span><br><span class="line">                    <span class="keyword">this</span>.state.active.turn(<span class="literal">false</span>, <span class="keyword">this</span>.rows, <span class="keyword">this</span>.cols);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            <span class="keyword">data</span>:<span class="keyword">this</span>.state.<span class="keyword">data</span>,</span><br><span class="line">            active:<span class="keyword">this</span>.state.active,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.refs.main.setState(&#123;</span><br><span class="line">            <span class="keyword">data</span>:<span class="keyword">this</span>.state.<span class="keyword">data</span>,</span><br><span class="line">            active:<span class="keyword">this</span>.state.active</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向下移动，能下落返回true，不能返回false，结束游戏返回null</span></span><br><span class="line"> moveActiveDown = ()=&gt;&#123;</span><br><span class="line">        let bottom = <span class="keyword">this</span>.state.active.row + <span class="keyword">this</span>.state.active.height();</span><br><span class="line">        <span class="keyword">if</span>(bottom &lt;= <span class="keyword">this</span>.rows)&#123;</span><br><span class="line">            <span class="keyword">this</span>.state.active.row++</span><br><span class="line">            <span class="keyword">if</span>(Game.testCollsion(<span class="keyword">this</span>.state.<span class="keyword">data</span>,<span class="keyword">this</span>.state.active))&#123;</span><br><span class="line">                <span class="keyword">this</span>.state.active.row --;</span><br><span class="line">                <span class="keyword">if</span>(Game.testCollsion(<span class="keyword">this</span>.state.<span class="keyword">data</span>,<span class="keyword">this</span>.state.active))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span> </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//碰撞测试</span><br><span class="line">   static testCollsion(<span class="built_in">matrix</span>,tetris)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="built_in">let</span> <span class="built_in">row</span> = <span class="number">0</span>;<span class="built_in">row</span> &lt; tetris.<span class="built_in">height</span>(); <span class="built_in">row</span>++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="built_in">let</span> <span class="built_in">col</span> = <span class="number">0</span>;<span class="built_in">col</span> &lt; tetris.<span class="built_in">width</span>();<span class="built_in">col</span>++)&#123;</span><br><span class="line">               <span class="keyword">if</span>((tetris.<span class="built_in">row</span> + <span class="built_in">row</span> &gt;= <span class="built_in">matrix</span>.<span class="built_in">length</span>)</span><br><span class="line">                   ||(tetris.<span class="built_in">col</span> + <span class="built_in">col</span> &gt;= <span class="built_in">matrix</span>[<span class="number">0</span>].<span class="built_in">length</span>)</span><br><span class="line">                   ||(<span class="built_in">matrix</span>[tetris.<span class="built_in">row</span> + <span class="built_in">row</span>][tetris.<span class="built_in">col</span> + <span class="built_in">col</span>] !== null</span><br><span class="line">                   &amp;&amp; tetris.getTile(<span class="built_in">row</span>,<span class="built_in">col</span>) !== null</span><br><span class="line">                   ))&#123; </span><br><span class="line">                       </span><br><span class="line">                       <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;   </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>执行流程</p><ul><li>系统初始化，生成游戏Grid、预览Grid，监听键盘事件</li><li>生成2个随机Tetris，作为初始Tetris，一个是当前活动可控的Tetris，另一个是作为下一个即将下落的Tetris</li><li>更新Tetris坐标，进行碰撞计算</li><li>活动Tetris落到底部后，将下一个即将落下的Tetris作为活动Tetris，并重新生成下一个Tetris</li><li><p>AI的执行流程也是一样的，只是等待的不是玩家输入，而是AI给出的按键。</p><p> 到此整个游戏的核心部分基本都列举出来，能够愉快的玩上一会，接下来就是想办法让计算机帮你玩啦</p></li></ul><hr><h2 id="实现AI"><a href="#实现AI" class="headerlink" title="实现AI"></a>实现AI</h2><p>此处选自大佬文章：<a href="https://www.hoyt-tian.com/zhuan-ti-e-luo-si-fang-kuai-de-reactshi-xian-san-aisuan-fa-ji-qi-shi-xian/" target="_blank" rel="noopener">https://www.hoyt-tian.com/zhuan-ti-e-luo-si-fang-kuai-de-reactshi-xian-san-aisuan-fa-ji-qi-shi-xian/</a></p><ul><li>整体思路<br>由于方块的每次可能的着陆状态是有限的，因此枚举所有的着陆可能，并结合当前游戏区域的状态，给每一种可能性予以评分，最后选择得分最高的着陆点，然后生成一条从起落点到终点的路径，就是一个砖块的解。重复这个步骤，就是一个游戏ai。</li><li>状态分析，给定一个当前的游戏数据矩阵和活动砖块的着陆点，分析这种结果的好坏，已知活动砖块的起始状态和终止状态，给出一个状态变化序列描述这个过程</li><li>现有分析指标：游戏区域残留的砖块越少越安全，如果一个砖块下落，可以消除某几行，那么优先考虑这个着陆点，尽量不要让砖块落下后导致出现空洞，砖块最好分布的比较均匀，不要一些地方对了很高、一些地方很低，这些经验可以转化成量化手段，LeeYiyuan在自己的AI实现中提出了是个指标来评价一个着陆状态。原文地址见：<a href="http://codemyroad.wordpress.com/2013/04/14/tetris-ai-the-near-perfect-player/" target="_blank" rel="noopener">http://codemyroad.wordpress.com/2013/04/14/tetris-ai-the-near-perfect-player/ </a>（需要翻墙）。这四个指标分别是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">消除行数，新砖块下落后能消除多少行</span><br><span class="line">空洞数，新砖块下落后，当前局势有多少个空洞</span><br><span class="line">井的数量，新砖块下落后，当前局势井的数量</span><br><span class="line">平整度，新砖块下落后，各列之间的高度差绝对值之和</span><br></pre></td></tr></table></figure></li></ul><p>还有一些更为复杂的评价体系，会将砖块的旋转、水平、垂直方向上的移动都考虑进去。<br>本文的评价模型:<br>在综合考虑了多种指标体系之后，我采用了一个仿照LeeYiyuan体系的指标，唯一的不同之处是，LeeYiyuan考虑的井这种特殊形状，我放弃了考虑井，取而代之，引入一个新指标：平均高度。因此，本文使用的完整评价指标为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">消除行数，新砖块下落后能消除多少行</span><br><span class="line">平均高度，新砖块下落后，当前局势的平均高度（刨去将被消除的行）</span><br><span class="line">空洞数，新砖块下落后，当前局势有多少个空洞（刨去将被消除的行）</span><br><span class="line">平整度，新砖块下落后，各列之间的高度差绝对值之和（刨去将被消除的行）</span><br></pre></td></tr></table></figure></p><p>虽然只有4个指标，但已经足以量化当前局势的状态。通过平均高度和平整度两个指标，可以激励ai将砖块均匀的分布在游戏区域；通过消除行数，可以激励ai尽可能寻找机会消除砖块；通过平均高度、平整度和空洞度，可以激励ai在压制高度的同时，尽量避免造成空洞。</p><ul><li><p>指标权重<br>光有这几个指标还不行，这些指标要能组合到一起起作用，还需要有合适的权重系数。指标的选取可以通过阅读文献来获得，但具体的加权系数，就要靠自己去尝试得出了，除非直接使用别人的指标/评价模型和评价方式。<br>那么如何得知这些指标各自的有效权重呢？通过非常经典的遗传算法，可以帮助我们找出各个指标适合的权重系数。</p></li><li><p>遗传算法<br>遗传算法模拟了自然界生物演化的过程，通过不断筛选出适应性更高的个体，并使它们互相结合，甚至引入少量的突变个体，经过几代的演化之后，就能够得出一些近似的最优解。</p></li></ul><p>具体到俄罗斯方块这个项目，遗传算法的应用如下：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先生成一批种子权重值，每一项权重的权重值x介于(-val, val)之间，val可以取<span class="number">0.5</span>或者<span class="number">1</span>，初始种子的适应性(fitness)都可以置为Number.NEGATIVE_INFINITY</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> ai逐一使用这些种子包含的权重系数，去控制游戏，将经历的活动砖块数直接作为适应性的结果</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 当所有种子都计算出对应的适应性值时，对种子集按照适应性结果进行排序，按照降序排列，种群前<span class="number">60</span>%的种子保留到下一轮演化，其余的淘汰</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 剩下的<span class="number">60</span>%的候选种子进行杂交，并伴随一定概率的突变，得到一个新种群</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 重复<span class="number">2</span>～<span class="number">4</span>的步骤，直至候选种群小于某个阈值</span><br></pre></td></tr></table></figure></p><ul><li><p>路径算法<br>在已知了活动砖块的起始状态和终止状态时，砖块的路径就比较容易得到了。<br>首先将砖块旋转到终止状态，然后进行水平方向的移动，最后进行垂直移动，即可到达最终态。而这个操作过程形成的队列，就是需要的结果。</p></li><li><p>可能有人有疑问，有的时候，还会出现移动到特定位置后的旋转、变形或者水平移动的情况，然后再进行移动。的确，人类在玩俄罗斯方块的时候，时常出现这种情况，来填补由于操作失误或者其他原因导致的部分砖块悬挂，形成的侧边空洞。但为什么这里没有考虑呢？一，是为了简化问题，与此同时，本身的评价模型中，就考虑了尽量避免这种情况。因为模型的平整性、平均高度两个指标，已经要求ai在考虑时，不要出现某个砖块悬空的情况。实际实践时，也发现ai并不会作出侧边空洞，能够存活很久。</p></li></ul><p>至此，俄罗斯方块的AI实现主要内容全部介绍完毕，接下来我对代码做一些简单讲解：</p><p>枚举状态部分代码：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//遍历所有可能性</span><br><span class="line">   think(game)&#123; </span><br><span class="line">       <span class="built_in">let</span> tetris = game.state.active;</span><br><span class="line">       <span class="built_in">let</span> <span class="built_in">origin</span> = &#123;</span><br><span class="line">           <span class="built_in">row</span>: tetris.<span class="built_in">row</span>,</span><br><span class="line">           <span class="built_in">col</span>: tetris.<span class="built_in">col</span>,</span><br><span class="line">           <span class="built_in">matrix</span>: buildMainMatrix(game.rows, game.cols, (<span class="built_in">row</span>, <span class="built_in">col</span>)=&gt;&#123;</span><br><span class="line">               <span class="built_in">return</span> game.state.data[<span class="built_in">row</span>][<span class="built_in">col</span>];</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">let</span> result = [];</span><br><span class="line">       <span class="keyword">for</span>(<span class="built_in">let</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">           <span class="keyword">do</span>&#123;</span><br><span class="line">               <span class="keyword">while</span>(game.moveActiveDown())&#123;</span><br><span class="line">                   ;</span><br><span class="line">               &#125;</span><br><span class="line">               game.merge(tetris);</span><br><span class="line">               <span class="built_in">let</span> state = AI.state(game.state.data, game);</span><br><span class="line">               result.<span class="built_in">push</span>(&#123;</span><br><span class="line">                   state: state,</span><br><span class="line">                   turn: i,</span><br><span class="line">                   <span class="built_in">row</span>:tetris.<span class="built_in">row</span>,</span><br><span class="line">                   <span class="built_in">col</span>:tetris.<span class="built_in">col</span></span><br><span class="line">               &#125;);</span><br><span class="line">               </span><br><span class="line">               </span><br><span class="line">               tetris.setPos(<span class="built_in">origin</span>.<span class="built_in">row</span>, tetris.<span class="built_in">col</span>);                </span><br><span class="line">               game.state.data = buildMainMatrix(game.rows, game.cols, (i, j)=&gt;&#123;</span><br><span class="line">                   <span class="built_in">return</span> <span class="built_in">origin</span>.<span class="built_in">matrix</span>[i][j];</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line">           &#125;<span class="keyword">while</span>(game.moveActiveLeft());</span><br><span class="line"></span><br><span class="line">           tetris.setPos(<span class="built_in">origin</span>.<span class="built_in">row</span>, <span class="built_in">origin</span>.<span class="built_in">col</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span>(game.moveActiveRight())&#123;</span><br><span class="line">               <span class="keyword">while</span>(game.moveActiveDown())&#123;</span><br><span class="line">                   ;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               game.merge(tetris);</span><br><span class="line">               <span class="built_in">let</span> state = AI.state(game.state.data, game);</span><br><span class="line">               result.<span class="built_in">push</span>(&#123;</span><br><span class="line">                   state: state,</span><br><span class="line">                   turn: i,</span><br><span class="line">                   <span class="built_in">row</span>:tetris.<span class="built_in">row</span>,</span><br><span class="line">                   <span class="built_in">col</span>:tetris.<span class="built_in">col</span>                   </span><br><span class="line">               &#125;);</span><br><span class="line">               </span><br><span class="line">               </span><br><span class="line">               tetris.setPos(<span class="built_in">origin</span>.<span class="built_in">row</span>, tetris.<span class="built_in">col</span>);                </span><br><span class="line">               game.state.data = buildMainMatrix(game.rows, game.cols, (i, j)=&gt;&#123;</span><br><span class="line">                   <span class="built_in">return</span> <span class="built_in">origin</span>.<span class="built_in">matrix</span>[i][j];</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           tetris.setPos(<span class="built_in">origin</span>.<span class="built_in">row</span>, <span class="built_in">origin</span>.<span class="built_in">col</span>); </span><br><span class="line">           tetris.turn(<span class="literal">true</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       tetris.setPos(<span class="built_in">origin</span>.<span class="built_in">row</span>, <span class="built_in">origin</span>.<span class="built_in">col</span>);</span><br><span class="line">       game.state.data = <span class="built_in">origin</span>.<span class="built_in">matrix</span>;</span><br><span class="line">       <span class="built_in">return</span> this.actions(result, tetris, game);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到具体遍历流程，首先保存好当前所有的位置信息，然后第一个do-while是向左移动一次，再向下落到不能动，然后计算四种分析指标，保存为一个结果，然后复位重复，第二个while循环向右移动后再向下落至不能移动，计算状态保存为一个结果，最<br>后旋转，再重复，旋转，再重复…</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//获得结果</span><br><span class="line"> actions(result, tetris, game)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result.<span class="built_in">length</span>&lt;=<span class="number">0</span>) <span class="built_in">return</span> [];</span><br><span class="line"></span><br><span class="line">        result.forEach((item)=&gt;&#123;</span><br><span class="line">            item.score = AI.caculate(item.state, game.ai);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        result.<span class="built_in">sort</span>((a,b)=&gt;&#123; <span class="built_in">return</span> b.score - a.score; &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">let</span> target = result[<span class="number">0</span>];</span><br><span class="line">        // console.<span class="built_in">log</span>(result)</span><br><span class="line">        <span class="built_in">let</span> steps = [];</span><br><span class="line">        switch(target.turn)&#123;</span><br><span class="line">            case <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            case <span class="number">1</span>:</span><br><span class="line">                steps.<span class="built_in">push</span>(&#123;code:<span class="number">0x28</span>,desc:<span class="string">"TR"</span>&#125;);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            case <span class="number">2</span>:</span><br><span class="line">                steps.<span class="built_in">push</span>(&#123;code:<span class="number">0x28</span>,desc:<span class="string">"TR"</span>&#125;);</span><br><span class="line">                steps.<span class="built_in">push</span>(&#123;code:<span class="number">0x28</span>,desc:<span class="string">"TR"</span>&#125;);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            case <span class="number">3</span>:</span><br><span class="line">                steps.<span class="built_in">push</span>(&#123;code:<span class="number">0x26</span>,desc:<span class="string">"TL"</span>&#125;);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tetris.<span class="built_in">col</span> &lt; target.<span class="built_in">col</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">let</span> i=tetris.<span class="built_in">col</span>; i&lt;target.<span class="built_in">col</span>; i++)&#123;</span><br><span class="line">                steps.<span class="built_in">push</span>(&#123;code:<span class="number">0x27</span>,desc:<span class="string">"MR"</span>&#125;);                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tetris.<span class="built_in">col</span> &gt; target.<span class="built_in">col</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">let</span> i=target.<span class="built_in">col</span>; i&lt;tetris.<span class="built_in">col</span>; i++)&#123;</span><br><span class="line">                steps.<span class="built_in">push</span>(&#123;code:<span class="number">0x25</span>,desc:<span class="string">"ML"</span>&#125;);                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">let</span> i=tetris.<span class="built_in">row</span>; i&lt;target.<span class="built_in">row</span>; i++)&#123;</span><br><span class="line">            steps.<span class="built_in">push</span>(&#123;code:<span class="number">0x20</span>,desc:<span class="string">"MD"</span>&#125;);            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> steps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static caculate(state, ai)&#123;</span><br><span class="line">        <span class="built_in">return</span> state.clear * ai.alpha + state.avgh * ai.<span class="built_in">beta</span> + state.hc * ai.gama + ai.<span class="built_in">delta</span> * state.<span class="built_in">delta</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里是用计算得到的各项指标和各自权值进行计算，将结果从大到小排序，取计算的最大值的位置的作为本次砖块最后的落点，然后生成移动路径数组，返回给控制部分控制移动。</p><p>下面是遗传算法部分代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//杂交</span></span><br><span class="line">   <span class="keyword">static</span> crossOver(seed1,seed2)&#123;</span><br><span class="line">       <span class="keyword">let</span> a1 = seed1.fitness / (seed1.fitness + seed2.fitness);<span class="comment">//计算seed1的杂交权重</span></span><br><span class="line">       <span class="keyword">let</span> a2 = seed2.fitness / (seed1.fitness + seed2.fitness);<span class="comment">//计算seed2的杂交权重</span></span><br><span class="line">       <span class="keyword">let</span> newSeed = &#123;</span><br><span class="line">           alpha : a1 * seed1.alpha + a2 * seed2.alpha,</span><br><span class="line">           beta: a1 * seed1.beta + a2 * seed2.beta,</span><br><span class="line">           gama: a1 * seed1.gama + a2 * seed2.gama,</span><br><span class="line">           delta:a1 * seed1.delta + a2 * seed2.delta</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> newSeed;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//突变</span></span><br><span class="line">   multate(seed)&#123;</span><br><span class="line">       <span class="keyword">let</span> d = <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</span><br><span class="line">       <span class="keyword">let</span> r = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">4</span>)</span><br><span class="line">       <span class="comment">//随机选择一项进行突变</span></span><br><span class="line">       <span class="keyword">switch</span>(r)&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">               seed.alpha += d;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               seed.beta += d;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               seed.gama += d;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">               seed.delta += d;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> seed;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//进化</span></span><br><span class="line">   evolution()&#123;</span><br><span class="line">       <span class="comment">//按照适应值大小从大到小对seed进行排序</span></span><br><span class="line">       <span class="keyword">this</span>.seeds.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;<span class="keyword">return</span> b.fitness - a.fitness;&#125;)</span><br><span class="line"></span><br><span class="line">       <span class="comment">//保存最大项</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.state.max.fitness&lt;<span class="keyword">this</span>.seeds[<span class="number">0</span>].fitness)&#123;</span><br><span class="line">           <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">               max:<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.seeds[<span class="number">0</span>]))</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//取前60%的个体</span></span><br><span class="line">       <span class="keyword">let</span> capacity = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.seeds.length*<span class="number">0.6</span>)</span><br><span class="line">       <span class="keyword">this</span>.seeds.length = capacity;</span><br><span class="line">       <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">           capacity:capacity</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">if</span>(capacity&lt;<span class="number">3</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="keyword">this</span>.seeds.length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">           <span class="keyword">let</span> x = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()/<span class="number">10</span>*<span class="keyword">this</span>.seeds.length)</span><br><span class="line">           <span class="comment">//取前10分之1</span></span><br><span class="line">           <span class="keyword">this</span>.seeds[i] = GA.crossOver(<span class="keyword">this</span>.seeds[i],<span class="keyword">this</span>.seeds[x]);</span><br><span class="line">           <span class="comment">//随机突变</span></span><br><span class="line">           <span class="keyword">if</span>(<span class="built_in">Math</span>.random()&lt;<span class="number">0.05</span>)&#123;</span><br><span class="line">               <span class="keyword">this</span>.multate(<span class="keyword">this</span>.seeds[i])</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这里分别是杂交，突变，进化的代码，首先进化就是先按照适应值从大到小排序，选择前60%的个体保留，进行杂交，杂交就是所有剩下的个体和前10%的个体生成一个新的个体，新的个体的各项指标是根据原有两个个体的杂交权重计算得出，最后是突变，就是随机选择5%的个体，将其随机一项指标加上一个随机值，是不是相当有意思，利用计算的算力，模拟生物种群的进化过程，反正是我觉得相当奇妙了！<br>最后把训练出来的最优值放到AI游戏程序里，这样一个带AI的俄罗斯方块游戏就完成啦！</p><hr><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>主要的问题是出在修改旋转系统的地方，遇到了越界的情况，长条型的砖块腾空，发现是长条型的方块的旋转后变为了4*4的方形块从而造成底部有空余，而空余部分也算在砖块整体，导致提前触底碰撞，所以出现砖块腾空。后来想出来的解决方法是采用增加边界法，在底部和两侧都多加了两层，成功解决了这个问题。</p><hr><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>正如之前大佬在AI算法分析中说到的，这样的评估标准并不完备，经过我自己训练，测试得到的最好的一次成绩也仅仅是下落2000多砖块，消了1000层不到，所以还有很大的优化空间，如果有对这部分感兴趣的小伙伴可以查看上面算法分析时推荐的那篇文章。</p><p><img src="/img/tetris-end.png" alt="The End"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明:"></a>声明:</h2><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a><br>链接 ： <a href="http://constantin.cc/2017/11/06/TetrisWithAI/" target="_blank" rel="noopener">http://constantin.cc/2017/11/06/TetrisWithAI/</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;来自实验周的锅&quot;&gt;&lt;a href=&quot;#来自实验周的锅&quot; class=&quot;headerlink&quot; title=&quot;来自实验周的锅&quot;&gt;&lt;/a&gt;来自实验周的锅&lt;/h2&gt;&lt;p&gt;上周算法实验周，老师给了一堆带AI的游戏题目，本来准备写以前写过的贪吃蛇，但是手慢被抢走了，然后就选择了俄罗斯方块，怎料光写俄罗斯方块这个游戏就很有挑战了/(ㄒoㄒ)/~~，倒是游戏写完后的AI还没怎么费神。&lt;br&gt;
    
    </summary>
    
    
      <category term="GameAI" scheme="http://yoursite.com/tags/GameAI/"/>
    
  </entry>
  
  <entry>
    <title>React之实用Markdown编辑器使用手册</title>
    <link href="http://yoursite.com/2018/05/09/Markdown/"/>
    <id>http://yoursite.com/2018/05/09/Markdown/</id>
    <published>2018-05-09T08:58:37.135Z</published>
    <updated>2018-05-09T08:58:37.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发伊始"><a href="#开发伊始" class="headerlink" title="开发伊始"></a>开发伊始</h2><p>最近正好在学习React，想写点东西练练手，又想搞点实用的东西，而我对面桌的<a href="https://blog.mzisite.me/" target="_blank" rel="noopener">死宅MZI</a>正好写了一个Markdown的小demo,我就直接去他github一把梭子搞下来，从而开始了一条不归路。  </p><hr><h2 id="使用和源码"><a href="#使用和源码" class="headerlink" title="使用和源码"></a>使用和源码</h2><ul><li><p><a href="https://markdown.constantin.cc/" target="_blank" rel="noopener">点击这里直接使用</a>  </p></li><li><p><a href="https://github.com/uselessaddress/MarkdownComponent" target="_blank" rel="noopener">点击这里查看源码</a> </p></li></ul><p>如果觉得不错的话别忘了给个♥</p><hr><a id="more"></a><h2 id="简单功能介绍"><a href="#简单功能介绍" class="headerlink" title="简单功能介绍"></a>简单功能介绍</h2><ol><li><p>首先声明目前转换markdown语法字符串的功能是直接使用<a href="https://www.npmjs.com/package/markdown-to-jsx" target="_blank" rel="noopener">markdown-to-jsx</a>这个npm包，不排除以后会自己手撸一个，因为目前的markdown还是有不少问题，比如不能自订图片大小就很蛋疼。</p></li><li><p>简单的缓存功能，直接把当前的文本信息储存到浏览器的localStorage里，这样你不小心关掉编辑器或者下次打开也能接着写啦，如果想清理，请点击右边的全部清除按钮。</p></li><li><p>顶上的工具栏是特别滴实用的，从左到又依次是标题、粗体、斜体、图片、引用、代码块、链接、无序列表、有序列表、换行和换行添加一条分隔横线（这个功能是对面桌的死宅搞出来的，逃~</p></li><li><p>有个全屏预览效果，点击预览界面左上角的按钮就可以看到了。</p></li><li><p>提供文件下载功能，这个功能主要依靠HTML5的File API 实现，直接可以帮你把写的文件下载为md文件到你想要的文件目录，这里有篇不错的教程<a href="http://www.cnblogs.com/zichi/p/html5-file-api.html" target="_blank" rel="noopener">HTML5 File API </a>，可以先看看，之后我也会写写简单用法。</p></li><li><p>解决了文本框Tab键点击跳到下个模块的问题</p></li><li><p>解决Ctrl+Z的问题，实现方法和上面的Tab一样是重写了文本框区域键盘的按下事件，也就是React里的onKeyDown事件。</p></li><li><p>还有一些功能暂时没有开发，只是设想，比如右上方的发表文章按钮，就是想着可以点击后直接将文章发表到博客里，还有代码高亮、左右同步翻页，右边栏的行数、返回顶部按钮、从本地导入文件、简单响应式等，敬请期待接下来的版本~</p></li><li><p>接下来还会就各个功能点写些具体实现的介绍。</p></li></ol><hr><p><img src="/img/markdown.jpg" alt="By:WLOP"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>作者 ： PrConstantin<br>来源 ： <a href="http://constantin.cc" target="_blank" rel="noopener">http://constantin.cc</a><br>链接 ： <a href="http://constantin.cc/2017/05/03/Markdown/" target="_blank" rel="noopener">http://constantin.cc/2017/05/03/Markdown/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发伊始&quot;&gt;&lt;a href=&quot;#开发伊始&quot; class=&quot;headerlink&quot; title=&quot;开发伊始&quot;&gt;&lt;/a&gt;开发伊始&lt;/h2&gt;&lt;p&gt;最近正好在学习React，想写点东西练练手，又想搞点实用的东西，而我对面桌的&lt;a href=&quot;https://blog.mzisite.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;死宅MZI&lt;/a&gt;正好写了一个Markdown的小demo,我就直接去他github一把梭子搞下来，从而开始了一条不归路。  &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;使用和源码&quot;&gt;&lt;a href=&quot;#使用和源码&quot; class=&quot;headerlink&quot; title=&quot;使用和源码&quot;&gt;&lt;/a&gt;使用和源码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://markdown.constantin.cc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击这里直接使用&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/uselessaddress/MarkdownComponent&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击这里查看源码&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果觉得不错的话别忘了给个♥&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
</feed>
